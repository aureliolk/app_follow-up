// app/api/follow-up/_lib/ai/functionIa.ts

import { prisma } from '@/lib/db';
import { generateChatCompletion } from '@/lib/ai/chatService';
import { CoreMessage } from 'ai';
import { formatDistanceToNowStrict } from 'date-fns';
import { ptBR } from 'date-fns/locale';

// --- Tipagens para A√ß√µes da IA ---
interface AIActionBase {
  action_type: 'SEND_MESSAGE' | 'CHANGE_STAGE' | 'SCHEDULE_EVALUATION' | 'PAUSE' | 'REQUEST_HUMAN_REVIEW' | 'COMPLETE';
  reason: string; // Explica√ß√£o da IA para a decis√£o
}

interface SendMessageAction extends AIActionBase {
  action_type: 'SEND_MESSAGE';
  content_source: 'generate' | 'template'; // 'generate' para criar nova msg, 'template' para usar/personalizar
  template_name?: string; // Nome do template base (FollowUpStep.template_name), se content_source for 'template'
  is_hsm: boolean; // O sistema de envio usar√° isso para chamar a API correta (HSM ou texto livre)
  delay_ms?: number; // Atraso em milissegundos antes de agendar o envio (ex: 5000 para 5s)
}

interface ChangeStageAction extends AIActionBase {
  action_type: 'CHANGE_STAGE';
  target_stage_id: string; // ID do est√°gio de destino (FollowUpFunnelStage.id)
}

interface ScheduleEvaluationAction extends AIActionBase {
  action_type: 'SCHEDULE_EVALUATION';
  delay_ms: number; // Tempo em milissegundos at√© a IA reavaliar este follow-up
}

interface PauseAction extends AIActionBase {
  action_type: 'PAUSE';
  // 'reason' j√° est√° em AIActionBase
}

interface RequestHumanReviewAction extends AIActionBase {
  action_type: 'REQUEST_HUMAN_REVIEW';
  // 'reason' j√° est√° em AIActionBase
}

interface CompleteAction extends AIActionBase {
  action_type: 'COMPLETE';
  // 'reason' j√° est√° em AIActionBase
}

// Union Type para o retorno da fun√ß√£o principal
export type AIAction = SendMessageAction | ChangeStageAction | ScheduleEvaluationAction | PauseAction | RequestHumanReviewAction | CompleteAction;

// A√ß√£o padr√£o segura em caso de erro na IA ou parsing
const defaultAIAction: ScheduleEvaluationAction = {
  action_type: 'SCHEDULE_EVALUATION',
  reason: 'Erro na an√°lise da IA ou formato de resposta inv√°lido. Agendando reavalia√ß√£o em 1 hora.',
  delay_ms: 60 * 60 * 1000 // 1 hora
};
// --- Fim das Tipagens ---

// Fun√ß√£o Principal de Decis√£o da IA
export async function determineNextAction(followUpId: string): Promise<AIAction> {
  try {
    console.log(`üß† Iniciando determina√ß√£o de pr√≥xima a√ß√£o para FollowUp ${followUpId}`);

    // 1. Buscar Contexto Abrangente
    const followUp = await prisma.followUp.findUnique({
      where: { id: followUpId },
      include: {
        campaign: {
          include: {
            stages: { // Inclui todos os est√°gios da campanha
              orderBy: { order: 'asc' },
              include: {
                steps: { // Inclui os templates/passos de cada est√°gio
                  orderBy: { order: 'asc' } // ou wait_time_ms
                }
              }
            }
          }
        },
        messages: { // Hist√≥rico recente
          orderBy: { sent_at: 'asc' }, // Ordem cronol√≥gica
          take: 15 // Aumentar um pouco para dar mais contexto √† IA
        },
        ai_analyses: { // √öltima an√°lise feita
          orderBy: { created_at: 'desc' },
          take: 1
        }
      }
    });

    // Valida√ß√£o inicial
    if (!followUp) {
      console.error(`FollowUp ${followUpId} n√£o encontrado para determinar a√ß√£o.`);
      return { ...defaultAIAction, reason: `FollowUp ID ${followUpId} n√£o encontrado.` };
    }
    if (!followUp.campaign) {
      console.error(`Campanha associada ao FollowUp ${followUpId} n√£o encontrada.`);
      return { ...defaultAIAction, action_type: 'PAUSE', reason: `Campanha n√£o encontrada.` };
    }
    if (!followUp.current_stage_id) {
      console.warn(`FollowUp ${followUpId} n√£o tem um est√°gio atual definido.`);
      // Poderia tentar definir o primeiro est√°gio ou pausar
      const firstStage = followUp.campaign.stages[0];
      if (firstStage) {
        await prisma.followUp.update({ where: { id: followUpId }, data: { current_stage_id: firstStage.id } });
        followUp.current_stage_id = firstStage.id; // Atualiza localmente
        console.log(`Definido est√°gio inicial ${firstStage.name} para FollowUp ${followUpId}.`);
      } else {
        return { ...defaultAIAction, action_type: 'PAUSE', reason: `FollowUp sem est√°gio atual e campanha sem est√°gios.` };
      }
    }


    // 2. Preparar Informa√ß√µes para o Prompt
    const currentStage = followUp.campaign.stages.find(s => s.id === followUp.current_stage_id);
    if (!currentStage) {
      console.error(`Est√°gio atual ID ${followUp.current_stage_id} n√£o encontrado nos est√°gios da campanha ${followUp.campaign.id}.`);
      // Tentar encontrar pelo nome se dispon√≠vel nos logs ou pausar
      return { ...defaultAIAction, action_type: 'PAUSE', reason: `Est√°gio atual ID ${followUp.current_stage_id} inv√°lido.` };
    }

    const currentStageTemplates = currentStage.steps || [];
    const hsmTemplates = currentStageTemplates.filter(step => step.template_name);
    const regularTemplates = currentStageTemplates.filter(step => !step.template_name);

    const agora = Date.now();
    const lastClientMsgTime = followUp.last_client_message_at ? new Date(followUp.last_client_message_at).getTime() : 0;
    const timeSinceLastClientMessageMs = lastClientMsgTime > 0 ? agora - lastClientMsgTime : Infinity;
    const isOutside24hWindow = timeSinceLastClientMessageMs >= (24 * 60 * 60 * 1000);

    const formattedTimeSince = lastClientMsgTime > 0
      ? formatDistanceToNowStrict(new Date(lastClientMsgTime), { addSuffix: true, locale: ptBR })
      : 'nunca';

    // Montar a string 'history'
    const history = followUp.messages.map(msg => {
    const prefix = msg.is_from_client ? 'Cliente' : 'Assistente';
    const suffix = !msg.is_from_client ? ` (Template: ${msg.template_used || 'Gerado'}; Status: ${msg.delivered ? 'Entregue' : (msg.error_sending ? 'Falhou' : 'Enviando')})` : '';
    return `${prefix}: ${msg.content?.substring(0, 100)}${msg.content && msg.content.length > 100 ? '...' : ''}${suffix}`;
    }).join('\n');

    const lastAnalysis = followUp.ai_analyses[0];
    const formattedAnalysis = lastAnalysis
      ? `Sentimento: ${lastAnalysis.sentiment}, Inten√ß√£o: ${lastAnalysis.intent}, T√≥picos: ${lastAnalysis.topics?.join(', ') || 'N/A'}, Pr√≥x. A√ß√£o Sugerida: ${lastAnalysis.next_action || 'N/A'}`
      : 'Nenhuma an√°lise recente.';


    // 3. Construir o Prompt Detalhado para a IA
    const systemPrompt = `
    Voc√™ √© "Alex", um assistente de vendas/suporte especialista em gerenciar follow-ups de forma inteligente e humana. Seu objetivo √© guiar o cliente pela campanha, respeitando o contexto e as regras do WhatsApp.
    
    OBJETIVO GERAL DA CAMPANHA "${followUp.campaign.name}": ${followUp.campaign.description || 'N√£o especificado.'}
    OBJETIVO DO EST√ÅGIO ATUAL "${currentStage.name}": ${currentStage.description || 'N√£o especificado.'}
    
    CONTEXTO DO CLIENTE (ID: ${followUp.client_id}):
    - Est√°gio Atual: ${currentStage.name} (Ordem: ${currentStage.order})
    - √öltima Mensagem do Cliente: ${formattedTimeSince}
    - Status Janela 24h: ${isOutside24hWindow ? '**FECHADA** (> 24h ou nunca interagiu)' : 'ABERTA (< 24h)'}
    - An√°lise da √öltima Resposta (se houver): ${formattedAnalysis}
    - Hist√≥rico Recente da Conversa:
    ${history || 'Nenhuma mensagem ainda.'}
    
    RECURSOS DISPON√çVEIS NESTE EST√ÅGIO (${currentStage.name}):
    - Templates Padr√£o (N√ÉO USAR se janela FECHADA):
    ${regularTemplates.length > 0 ? regularTemplates.map(t => `  - Nome: "${t.template_name}" (Espera Padr√£o Ap√≥s Envio: ${t.wait_time})`).join('\n') : '  Nenhum'}
    - Templates HSM Aprovados (**OBRIGAT√ìRIO** para iniciar conversa se janela FECHADA):
    ${hsmTemplates.length > 0 ? hsmTemplates.map(t => `  - Nome: "${t.template_name}" (Espera Padr√£o Ap√≥s Envio: ${t.wait_time})`).join('\n') : '  Nenhum'}
    
    REGRAS CR√çTICAS **IMPOSTAS**:
    1.  **SE A JANELA DE 24H ESTIVER FECHADA:** Sua *√∫nica* op√ß√£o de envio √© \`action_type: "SEND_MESSAGE"\` com \`is_hsm: true\` e \`content_source: "template"\`, utilizando um \`template_name\` da lista de **HSMs Aprovados** acima. √â **PROIBIDO** usar \`content_source: "generate"\` ou \`is_hsm: false\`. Se n√£o houver HSMs adequados na lista acima, escolha "SCHEDULE_EVALUATION" ou "PAUSE".
    2.  **SE A JANELA DE 24H ESTIVER ABERTA:** Voc√™ pode usar \`SEND_MESSAGE\` com \`content_source: "generate"\` (e \`is_hsm: false\`) OU \`content_source: "template"\` (com \`is_hsm: true\` se for HSM, ou \`is_hsm: false\` se for padr√£o).
    3.  **TIMING PADR√ÉO vs DI√ÅLOGO:**
        *   **Fluxo Padr√£o:** Se decidir enviar uma mensagem usando um template (\`SEND_MESSAGE\` com \`content_source: "template"\`) para seguir a sequ√™ncia planejada, **N√ÉO** retorne um \`delay_ms\` para esta a√ß√£o. O sistema agendar√° a pr√≥xima avalia√ß√£o automaticamente com base na "Espera Padr√£o Ap√≥s Envio" do template que voc√™ escolheu.
        *   **Di√°logo Ativo:** Se est√° respondendo diretamente a uma mensagem recente do cliente (especialmente usando \`content_source: "generate"\`), ou se a inten√ß√£o √© manter uma conversa r√°pida, voc√™ **DEVE** usar \`action_type: "SCHEDULE_EVALUATION"\` com um \`delay_ms\` CURTO (ex: 1 a 5 minutos = 60000 a 300000 ms).
        *   **Espera Espec√≠fica:** Se precisar esperar um tempo *diferente* do padr√£o (ex: cliente pediu), use \`action_type: "SCHEDULE_EVALUATION"\` com o \`delay_ms\` apropriado (ex: 86400000 para 1 dia).
    4.  **HUMANIZA√á√ÉO:** Aja como "Alex"... [manter regra]
    5.  **PROGRESS√ÉO:** Tente mover o cliente... [manter regra]
    6.  **N√ÉO INCOMODAR:** ... [manter regra]
    7.  **D√öVIDAS:** ... [manter regra]
    
    SUA TAREFA:
    Analise o contexto e decida a PR√ìXIMA MELHOR A√á√ÉO, **respeitando estritamente a regra da janela de 24h e as regras de timing**.
    
    RESPONDA ESTRITAMENTE COM UM √öNICO OBJETO JSON **V√ÅLIDO**, sem nenhum texto antes ou depois. Use aspas duplas para chaves e valores de string. Certifique-se de que h√° v√≠rgulas (,) entre cada par chave-valor, exceto ap√≥s o √∫ltimo. Exemplo:
    \`\`\`json
    {
      "action_type": "SEND_MESSAGE",
      "reason": "Exemplo de raz√£o.",
      "content_source": "template",
      "is_hsm": true,
      "template_name": "nome_template_hsm"
    }
    \`\`\`
    
    O JSON DEVE conter:
    - "action_type": (Obrigat√≥rio) Uma das strings: "SEND_MESSAGE", "CHANGE_STAGE", "SCHEDULE_EVALUATION", "PAUSE", "REQUEST_HUMAN_REVIEW", "COMPLETE".
    - "reason": (Obrigat√≥rio) Sua justificativa.
    - Par√¢metros Adicionais (conforme action_type):
        - Se "SEND_MESSAGE": inclua "content_source", "is_hsm", e "template_name" (se source for "template"). **N√ÉO inclua 'delay_ms' aqui** (ser√° tratado pelo sistema ou por SCHEDULE_EVALUATION).
        - Se "SCHEDULE_EVALUATION": **SEMPRE** inclua "delay_ms".
        - Se "CHANGE_STAGE": inclua "target_stage_id".
    
    Qual a pr√≥xima a√ß√£o (apenas o JSON)?
    `;

    // 4. Chamar a IA
    console.log(`FollowUp ${followUpId}: Enviando prompt para IA...`);
    const aiResponseString = await generateChatCompletion({
      // N√£o precisamos de hist√≥rico aqui, j√° est√° no prompt do sistema
      messages: [{ role: 'user', content: `Cliente: ${followUp.client_id}, Est√°gio: ${currentStage.name}. Qual a pr√≥xima a√ß√£o?` }], // Mensagem curta apenas para iniciar
      systemPrompt: systemPrompt // O prompt principal est√° aqui
    });

    // 5. Parse e Validar a Resposta da IA
    console.log(`FollowUp ${followUpId}: Resposta bruta da IA: ${aiResponseString}`);
    let aiDecision: AIAction;
    try {
      // Tenta remover ```json ... ``` se a IA incluir
      const cleanResponse = aiResponseString.replace(/^```json\s*|```$/g, '').trim();
      aiDecision = JSON.parse(cleanResponse);

      // Valida√ß√£o b√°sica da estrutura
      if (!aiDecision.action_type || typeof aiDecision.reason !== 'string') {
        throw new Error('Estrutura JSON b√°sica inv√°lida (action_type ou reason ausente/inv√°lido).');
      }

      // Valida√ß√£o espec√≠fica por tipo de a√ß√£o
      switch (aiDecision.action_type) {
        case 'SEND_MESSAGE':
          if (typeof aiDecision.is_hsm !== 'boolean' || !['generate', 'template'].includes(aiDecision.content_source)) {
            throw new Error('Par√¢metros inv√°lidos para SEND_MESSAGE (is_hsm ou content_source).');
          }
          if (aiDecision.content_source === 'template' && typeof aiDecision.template_name !== 'string') {
            throw new Error('Par√¢metro "template_name" obrigat√≥rio para SEND_MESSAGE com content_source="template".');
          }
          // Validar se a a√ß√£o respeita a regra das 24h
          if (isOutside24hWindow && (!aiDecision.is_hsm || aiDecision.content_source === 'generate')) {
            console.warn(`FollowUp ${followUpId}: IA sugeriu a√ß√£o (${aiDecision.action_type}, source: ${aiDecision.content_source}, hsm: ${aiDecision.is_hsm}) que viola regra das 24h. For√ßando reavalia√ß√£o.`);
            throw new Error('A√ß√£o sugerida viola regra das 24h.'); // For√ßa cair no catch e usar default
          }
          break;
        case 'CHANGE_STAGE':
          if (typeof aiDecision.target_stage_id !== 'string') {
            throw new Error('Par√¢metro "target_stage_id" obrigat√≥rio/inv√°lido para CHANGE_STAGE.');
          }
          break;
        case 'SCHEDULE_EVALUATION':
          if (typeof aiDecision.delay_ms !== 'number' || aiDecision.delay_ms <= 0) {
            throw new Error('Par√¢metro "delay_ms" obrigat√≥rio/inv√°lido para SCHEDULE_EVALUATION.');
          }
          break;
        // PAUSE, REQUEST_HUMAN_REVIEW, COMPLETE s√≥ precisam de 'reason', j√° validado.
      }

      console.log(`FollowUp ${followUpId}: Decis√£o da IA validada:`, aiDecision);
      return aiDecision;

    } catch (parseOrValidationError) {
      console.error(`FollowUp ${followUpId}: Erro ao parsear ou validar JSON da IA:`, parseOrValidationError, `\nResposta recebida:\n${aiResponseString}`);
      return { ...defaultAIAction, reason: `Erro ao processar resposta da IA: ${parseOrValidationError instanceof Error ? parseOrValidationError.message : 'Formato inv√°lido'}. Agendando reavalia√ß√£o.` };
    }

  } catch (error) {
    console.error(`Erro GERAL em determineNextAction para FollowUp ${followUpId}:`, error);
    return { ...defaultAIAction, reason: `Erro interno no servidor ao determinar a√ß√£o: ${error instanceof Error ? error.message : 'Erro desconhecido'}. Agendando reavalia√ß√£o.` };
  }
}

// Fun√ß√£o para analisar respostas do cliente com IA (Refatorada)
export async function analyzeClientResponse(
  clientId: string,
  messageContent: string, // Renomeado de 'message' para clareza
  followUpId: string
): Promise<AIAnalysisResult> {
  try {
    console.log(`Iniciando an√°lise de IA para cliente ${clientId}, followUp ${followUpId}`);
    const followUp = await prisma.followUp.findUnique({
      where: { id: followUpId },
      include: {
        campaign: { include: { stages: { orderBy: { order: 'asc' } } } },
        messages: { orderBy: { sent_at: 'desc' }, take: 5 }
      }
    });

    if (!followUp || !followUp.campaign) {
      console.error(`Follow-up ${followUpId} ou campanha associada n√£o encontrados.`);
      return defaultAnalysisResult;
    }

    const lastNonClientMessage = await prisma.followUpMessage.findFirst({
      where: { follow_up_id: followUpId, is_from_client: false },
      orderBy: { sent_at: 'desc' }
    });
    const messageId = lastNonClientMessage?.id; // ID da *nossa* mensagem √† qual o cliente pode estar respondendo

    const conversationHistory: CoreMessage[] = followUp.messages
      .map(msg => ({
        role: msg.is_from_client ? 'user' : 'assistant',
        content: msg.content || '' // Garantir que content n√£o seja null
      }))
      .reverse(); // Ordem cronol√≥gica (mais antigo primeiro)

    const stagesInfo = followUp.campaign.stages.map(stage => ({
      id: stage.id,
      name: stage.name,
      order: stage.order,
      isCurrent: stage.id === followUp.current_stage_id
    }));
    const currentStageName = stagesInfo.find(s => s.isCurrent)?.name || 'Desconhecido';

    // Prompt de Sistema claro pedindo JSON
    const systemPrompt = `Analise a √∫ltima mensagem do cliente no contexto da conversa.
Retorne SOMENTE um objeto JSON v√°lido com as seguintes chaves:
- "sentiment": ("positive", "neutral", "negative") - O sentimento predominante da mensagem do cliente.
- "intent": (string) - A inten√ß√£o principal do cliente (ex: "pedir_informacao", "mostrar_interesse", "reclamar", "agendar_reuniao", "desinteresse"). Seja espec√≠fico.
- "topics": (array de strings) - Os principais t√≥picos ou palavras-chave mencionados pelo cliente.
- "nextAction": (string) - Sugest√£o de pr√≥xima a√ß√£o INTERNA para o sistema ou atendente (ex: "responder_duvida", "agendar_demonstracao", "ignorar_seguir_fluxo", "escalar_atendimento").
- "suggestedStage": (string, opcional) - O ID do est√°gio para o qual o cliente deveria ser movido, se aplic√°vel. Retorne apenas se houver forte indica√ß√£o para mudan√ßa.

Contexto adicional:
- Cliente ID: ${clientId}
- Est√°gio atual do Funil: ${currentStageName}
- Est√°gios dispon√≠veis: ${stagesInfo.map(s => s.name).join(', ')}
`;

    // Mensagens para a IA (Hist√≥rico + Mensagem atual do cliente)
    const messages: CoreMessage[] = [
      ...conversationHistory,
      {
        role: 'user', // A mensagem que estamos analisando
        content: messageContent
      }
    ];

    // Chamar diretamente o servi√ßo de IA
    const aiResponseString = await generateChatCompletion({ messages, systemPrompt: systemPrompt }); // Passando system separado

    // Tentar fazer o parse da resposta JSON
    let aiAnalysis: AIAnalysisResult;
    try {
      aiAnalysis = JSON.parse(aiResponseString);
      // Valida√ß√£o b√°sica do formato esperado
      if (typeof aiAnalysis.sentiment !== 'string' || typeof aiAnalysis.intent !== 'string' || !Array.isArray(aiAnalysis.topics)) {
        throw new Error("Formato JSON da an√°lise de IA inv√°lido.");
      }
      console.log(`An√°lise de IA recebida para ${followUpId}:`, aiAnalysis);
    } catch (parseError) {
      console.error("Erro ao fazer parse da resposta JSON da IA (an√°lise):", parseError, "Resposta recebida:", aiResponseString);
      return defaultAnalysisResult; // Retorna padr√£o se o JSON for inv√°lido
    }

    // Salvar a an√°lise no banco de dados (se o parse foi bem-sucedido)
    const savedAnalysis = await prisma.followUpAIAnalysis.create({
      data: {
        follow_up_id: followUpId,
        message_id: messageId, // Pode ser null se n√£o houver mensagem anterior do sistema
        sentiment: aiAnalysis.sentiment,
        intent: aiAnalysis.intent,
        topics: aiAnalysis.topics || [],
        next_action: aiAnalysis.nextAction, // Usar a chave correta do JSON
        suggested_stage: aiAnalysis.suggestedStage // Usar a chave correta do JSON
      }
    });
    console.log(`An√°lise de IA salva com ID ${savedAnalysis.id} para followUp ${followUpId}`);

    return aiAnalysis;

  } catch (error) {
    console.error(`Erro na fun√ß√£o analyzeClientResponse para followUp ${followUpId}:`, error);
    return defaultAnalysisResult; // Retorna padr√£o em caso de erro geral
  }
}

// Fun√ß√£o para personalizar conte√∫do de mensagens com IA (J√° refatorada, sem altera√ß√µes aqui)
export async function personalizeMessageContent(
  originalMessage: string,
  clientId: string,
  followUpId: string,
  metadata: any // Cont√©m informa√ß√µes como stage_name, category, etc.
): Promise<string> {
  try {
    console.log(`Personalizando mensagem para cliente ${clientId}, followUp ${followUpId}`);
    const followUp = await prisma.followUp.findUnique({
      where: { id: followUpId },
      include: {
        messages: { orderBy: { sent_at: 'desc' }, take: 5 },
        ai_analyses: { orderBy: { created_at: 'desc' }, take: 3 }
      }
    });

    if (!followUp) {
      console.warn(`Follow-up ${followUpId} n√£o encontrado para personaliza√ß√£o. Usando mensagem original.`);
      return originalMessage;
    }

    const clientMessagesContent = followUp.messages
      .filter(msg => msg.is_from_client)
      .map(msg => msg.content || ''); // Garantir strings

    const recentAnalysesSummary = followUp.ai_analyses.map(analysis => ({
      sentiment: analysis.sentiment,
      intent: analysis.intent,
      topics: analysis.topics?.join(', ') || 'N/A' // Usar ?. e fallback
    }));

    const lastClientMessageContent = followUp.messages
      .filter(msg => msg.is_from_client)
      .sort((a, b) => new Date(b.sent_at).getTime() - new Date(a.sent_at).getTime())[0]?.content || 'Sem resposta recente';


    // Prompt de Sistema para personaliza√ß√£o
    const systemPrompt = `Voc√™ √© um assistente de vendas especialista em follow-up.
Sua fun√ß√£o √© REESCREVER e PERSONALIZAR mensagens para torn√°-las mais relevantes, naturais e engajadoras, como se um humano estivesse escrevendo.

REGRAS IMPORTANTES:
1. Mantenha o TOM e a INTEN√á√ÉO ORIGINAL da mensagem.
2. N√ÉO adicione informa√ß√µes novas que n√£o estavam impl√≠citas. FOQUE em adaptar a linguagem.
3. Use um tom profissional, amig√°vel e conversacional.
4. Personalize sutilmente com base no hist√≥rico e contexto do cliente, se relevante, mas sem parecer repetitivo.
5. NUNCA mencione que voc√™ √© uma IA ou assistente virtual.
6. Mantenha a mensagem CONCISA, idealmente com tamanho similar √† original.
7. Se a mensagem original cont√©m placeholders como {{nome}}, mantenha-os ou adapte-os contextualmente se souber o valor (ex: use o client ID se for o caso).
8. Retorne APENAS o texto da mensagem personalizada, sem nenhuma explica√ß√£o adicional.`;

    // Mensagem do usu√°rio com o contexto e a mensagem original
    const userPrompt = `Mensagem original a personalizar:
"${originalMessage}"

Contexto do Cliente (ID: ${clientId}):
- Est√°gio atual: ${metadata?.stage_name || 'Desconhecido'}
- Categoria da mensagem: ${metadata?.category || 'Geral'}
- Hist√≥rico recente de mensagens DO CLIENTE:
${clientMessagesContent.length > 0 ? clientMessagesContent.map(m => `- ${m}`).join('\n') : 'Nenhuma mensagem anterior do cliente.'}
- √öltima resposta DO CLIENTE: ${lastClientMessageContent}
- An√°lises recentes (sentimento/inten√ß√£o):
${recentAnalysesSummary.length > 0 ? JSON.stringify(recentAnalysesSummary, null, 2) : 'Nenhuma an√°lise dispon√≠vel.'}

Reescreva a mensagem original de forma personalizada e natural para este cliente.`;

    const messages: CoreMessage[] = [{ role: 'user', content: userPrompt }];

    // Chamar diretamente o servi√ßo de IA
    const personalizedMessage = await generateChatCompletion({ messages, systemPrompt: systemPrompt });

    console.log(`Mensagem original: "${originalMessage}"`);
    console.log(`Mensagem personalizada para ${followUpId}: "${personalizedMessage.trim()}"`);
    return personalizedMessage.trim();

  } catch (error) {
    console.error(`Erro ao personalizar mensagem com IA para followUp ${followUpId}:`, error);
    return originalMessage; // Retorna original em caso de erro
  }
}

// Fun√ß√£o: Gerar resposta dinamicamente pela IA (Refatorada)
export async function generateAIResponse(
  clientId: string,
  clientMessage: string,
  followUpId: string,
  stageInfo: any // Informa√ß√µes sobre o prop√≥sito do est√°gio atual
): Promise<string> {
  try {
    console.log(`Gerando resposta de IA para cliente ${clientId}, followUp ${followUpId}`);
    const followUp = await prisma.followUp.findUnique({
      where: { id: followUpId },
      include: {
        campaign: { include: { stages: { orderBy: { order: 'asc' } } } },
        messages: { orderBy: { sent_at: 'asc' }, take: 10 }, // Hist√≥rico cronol√≥gico
        ai_analyses: { orderBy: { created_at: 'desc' }, take: 1 }
      }
    });

    if (!followUp || !followUp.campaign) {
      console.error(`Follow-up ${followUpId} ou campanha n√£o encontrados para gerar resposta.`);
      return "Desculpe, n√£o consegui processar sua solicita√ß√£o no momento. Nosso time entrar√° em contato.";
    }

    const currentStage = followUp.campaign.stages.find(s => s.id === followUp.current_stage_id);
    const currentStageIndex = followUp.campaign.stages.findIndex(s => s.id === followUp.current_stage_id);
    const nextStage = currentStageIndex >= 0 && currentStageIndex < followUp.campaign.stages.length - 1
      ? followUp.campaign.stages[currentStageIndex + 1]
      : null;

    const messageHistory: CoreMessage[] = followUp.messages.map(msg => ({
      role: msg.is_from_client ? 'user' : 'assistant',
      content: msg.content || ''
    }));

    const recentAnalysis = followUp.ai_analyses[0];

    // Prompt de Sistema para Gera√ß√£o de Resposta
    const systemPrompt = `Voc√™ √© um representante de vendas/suporte humano, chamado Alex. Sua tarefa √© responder √†s mensagens dos clientes de forma natural, √∫til e com o objetivo de avan√ßar a conversa no funil de vendas/follow-up.

REGRAS ESSENCIAIS:
1. Aja como um HUMANO (Alex), NUNCA mencione ser uma IA.
2. Objetivo principal: Engajar o cliente e, se apropriado, mov√™-lo para o pr√≥ximo passo ou est√°gio.
3. Tom: Conversacional, amig√°vel, profissional, emp√°tico e prestativo.
4. Concis√£o: Respostas curtas e diretas (2-4 frases geralmente).
5. Personaliza√ß√£o: Use o contexto da conversa para tornar a resposta relevante.
6. A√ß√£o: Se o cliente fizer pergunta, responda. Se mostrar interesse, incentive o pr√≥ximo passo. Se tiver obje√ß√£o, trate-a com empatia.
7. Evite linguagem rob√≥tica ou excessivamente formal. Use contra√ß√µes (ex: "voc√™ pode", "estou aqui").
8. Se n√£o tiver certeza ou informa√ß√£o, diga que vai verificar ou que um especialista entrar√° em contato. N√ÉO INVENTE detalhes t√©cnicos complexos.
9. Retorne APENAS o texto da resposta, sem explica√ß√µes.`;

    // Mensagem do usu√°rio com contexto para a IA
    const userPrompt = `CONTEXTO DA CONVERSA:
- Campanha: ${followUp.campaign.name || 'N/A'}
- Cliente ID: ${clientId}
- Est√°gio Atual: ${currentStage?.name || 'Desconhecido'} (Prop√≥sito: ${stageInfo?.purpose || 'Engajamento'})
- Pr√≥ximo Est√°gio Potencial: ${nextStage?.name || 'Finaliza√ß√£o/Nenhum'}
- An√°lise da √öltima Mensagem do Cliente: Sentimento=${recentAnalysis?.sentiment || 'N/A'}, Inten√ß√£o=${recentAnalysis?.intent || 'N/A'}

HIST√ìRICO DA CONVERSA (√öltimas mensagens):
${messageHistory.map(m => `${m.role === 'user' ? 'Cliente' : 'Alex (Voc√™)'}: ${m.content}`).join('\n')}

√öLTIMA MENSAGEM DO CLIENTE: "${clientMessage}"

Sua Tarefa (Como Alex): Responda √† √∫ltima mensagem do cliente de forma natural e √∫til, considerando o contexto e o objetivo de avan√ßar a conversa.`;

    // N√£o precisamos incluir o hist√≥rico novamente aqui se j√° est√° no prompt do usu√°rio
    const messagesForAI: CoreMessage[] = [{ role: 'user', content: userPrompt }];

    // Chamar diretamente o servi√ßo de IA
    const aiGeneratedResponse = await generateChatCompletion({
      messages: messagesForAI,
      systemPrompt: systemPrompt
    });

    console.log(`Resposta de IA gerada para ${followUpId}: "${aiGeneratedResponse.trim()}"`);
    return aiGeneratedResponse.trim();

  } catch (error) {
    console.error(`Erro ao gerar resposta com IA para followUp ${followUpId}:`, error);
    return "Obrigado por sua mensagem! Recebemos sua solicita√ß√£o e um de nossos consultores entrar√° em contato em breve para ajud√°-lo."; // Mensagem segura
  }
}
