Project: Painel de Progresso de Disparo em Massa

1. Backend API
   - Criar rota GET /api/campaigns/[campaignId]/contacts (ou em app/api/workspaces/[id]/mass-trigger/contacts):
     • Usar Prisma: campaignContact.findMany({ where: { campaignId } })
     • Retornar id, contactInfo, contactName, status, sentAt, error
   - (Opcional) Criar rota SSE /api/campaigns/[campaignId]/progress para updates em tempo real:
     • subscribeToChannel(`campaign-progress:${campaignId}`)
     • Publicar no worker de envio (messageSender) eventos via redis.publish

2. Frontend UI
   - Adicionar ícone de "mostrar progresso" (olho) em cada linha de CampaignList
     • Ao clicar, abrir modal/drawer CampaignProgressModal
   - Implementar CampaignProgressModal:
     • Fetch inicial de GET /api/campaigns/[id]/contacts
     • Exibir barra de progresso (SENT / total), percentuais
     • Exibir tabela/lista de contatos com status e, em FAILED, mostrar mensagem de erro
     • Gerenciar loading e fallback (spinner)
   - (Opcional) Atualização automática:
     • Polling com SWR/React Query (refreshInterval)
     • Ou SSE: usar EventSource para /api/campaigns/[id]/progress

3. Integração e Testes
   - Reutilizar estilos/components existentes (Shadcn UI)
   - Escrever testes unitários para a rota de API e componente modal
   - Validar erros e estados de carregamento

4. Documentação
   - Atualizar README.md com instruções de uso do painel de progresso
   - Descrever endpoints e UI

5. Limpeza de Código
   - Remover rotas e código redundantes
   - Reaproveitar infra de SSE Redis-subscriber já existente
