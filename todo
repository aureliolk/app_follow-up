# TODO: Integração com Pusher para Tempo Real

Este plano descreve os passos para substituir a solução atual de WebSocket + Redis Pub/Sub pelo serviço gerenciado Pusher.

## 1. Configuração Inicial e Variáveis de Ambiente

-   [ ] Obter as credenciais do Pusher Channels (App ID, Key, Secret, Cluster) do seu dashboard Pusher.
-   [ ] Adicionar as credenciais ao arquivo `.env` (ou `.env.local`) do `app_follow-up`:
    -   `PUSHER_APP_ID="SUA_APP_ID"`
    -   `PUSHER_KEY="SUA_KEY"`
    -   `PUSHER_SECRET="SEU_SECRET"`
    -   `PUSHER_CLUSTER="seu_cluster"`
    -   `NEXT_PUBLIC_PUSHER_KEY="SUA_KEY"` # Chave pública para o frontend
    -   `NEXT_PUBLIC_PUSHER_CLUSTER="seu_cluster"` # Cluster para o frontend
-   [ ] Garantir que essas variáveis de ambiente sejam carregadas corretamente (reiniciar `pnpm dev` se necessário).
-   [ ] (Opcional/Produção) Configurar essas variáveis no ambiente do servidor/container onde `app_follow-up` roda.

## 2. Integração no Backend (`app_follow-up`)

-   [ ] Instalar a biblioteca oficial do Pusher para Node.js: `pnpm add pusher`
-   [ ] Criar um cliente Pusher singleton:
    -   Idealmente em um novo arquivo, ex: `lib/pusher.ts`.
    -   Inicializar o cliente usando as variáveis de ambiente (`PUSHER_APP_ID`, `PUSHER_KEY`, `PUSHER_SECRET`, `PUSHER_CLUSTER`).
    -   Exportar a instância do cliente.
-   [ ] Substituir publicações Redis por triggers Pusher:
    -   Localizar todos os pontos no código onde eventos eram publicados no Redis para notificar o antigo `app_websocket` (ex: após salvar nova mensagem, atualizar status, etc. - provavelmente em API Routes ou Server Actions relacionadas a conversas/mensagens).
    -   Remover a lógica de publicação Redis.
    -   Usar o cliente Pusher para disparar eventos: `await pusher.trigger('canal-alvo', 'nome-do-evento', dadosPayload);`
    -   **Estratégia de Canal:** Usar canais privados por workspace parece adequado: `private-workspace-${workspaceId}`.
    -   **Nomes de Eventos:** Manter nomes claros, como `'new_message'`, `'message_status_update'`, `'ai_status_update'`.
    -   **Payload:** Garantir que o `dadosPayload` contenha toda a informação necessária para o frontend atualizar a UI (ex: o objeto `Message` completo para `'new_message'`).
-   [ ] Implementar Endpoint de Autenticação para Canais Privados:
    -   O Pusher exige um endpoint no seu backend para autorizar usuários a se inscreverem em canais privados (`private-*`).
    -   Criar uma API Route, ex: `app/api/pusher/auth/route.ts`.
    -   Nesta rota:
        -   Verificar a sessão do usuário (ex: usando NextAuth).
        -   Verificar se o usuário tem permissão para acessar o canal solicitado (ex: verificar se pertence ao workspaceId do canal `private-workspace-${workspaceId}`).
        -   Se autorizado, usar o cliente Pusher (`pusher.authorizeChannel`) para gerar a resposta de autenticação que o `pusher-js` espera.
        -   Retornar a resposta de autorização ou um status 403 se não autorizado.

## 3. Integração no Frontend (`app_follow-up`)

-   [ ] Instalar a biblioteca oficial `pusher-js`: `pnpm add pusher-js`
-   [ ] Remover o `WebSocketProvider.tsx` antigo:
    -   Excluir o arquivo `context/WebSocketProvider.tsx`.
    -   Remover sua importação e uso no `layout.tsx` raiz ou onde quer que ele esteja envolvendo a aplicação.
-   [ ] Configurar e Gerenciar a Conexão `pusher-js`:
    -   **Onde:** Pode ser em um novo `PusherProvider.tsx` ou dentro do `useEffect` do `ConversationProvider.tsx` (avaliar qual se encaixa melhor).
    -   **Inicialização:** Criar uma instância do `Pusher` usando a `NEXT_PUBLIC_PUSHER_KEY` e `NEXT_PUBLIC_PUSHER_CLUSTER`. Configurar o `authEndpoint` para apontar para a API Route criada no backend (ex: `/api/pusher/auth`).
    -   **Conexão/Desconexão:** Conectar quando o usuário estiver logado e um workspace estiver ativo. Desconectar quando deslogar ou sair do workspace. Gerenciar o estado da conexão (`isConnected`).
    -   **Inscrição em Canal:** Quando um workspace estiver ativo, inscrever (`pusher.subscribe`) no canal correspondente (ex: `private-workspace-${workspaceId}`). Cancelar inscrição (`pusher.unsubscribe`) ao mudar de workspace ou deslogar.
-   [ ] Vincular Handlers de Eventos:
    -   Dentro do `useEffect` onde a inscrição do canal é feita, vincular (`channel.bind`) listeners para os eventos definidos no backend (`'new_message'`, `'message_status_update'`, etc.).
    -   Quando um evento for recebido do Pusher, chamar a função handler correspondente já existente no `ConversationContext` (ex: `handleRealtimeNewMessage(dadosRecebidos)`).
    -   Garantir que o formato dos `dadosRecebidos` do Pusher seja compatível com o que os handlers esperam.
-   [ ] Atualizar UI:
    -   Remover a barra de erro/status do WebSocket antigo.
    -   (Opcional) Adicionar um indicador visual sutil do status da conexão Pusher, se desejado.

## 4. Limpeza Final

-   [ ] Excluir completamente o diretório `app_websocket`.
-   [ ] Remover quaisquer referências ou dependências do `app_websocket` no `app_follow-up` (se houver).
-   [ ] Remover o `app_websocket` de qualquer configuração de deploy (Docker Compose, Docker Swarm YAML, etc.).
-   [ ] Remover a configuração do Redis Pub/Sub que era usada *exclusivamente* para o WebSocket (se o Redis ainda for usado para BullMQ, manter essa configuração).
-   [ ] Remover variáveis de ambiente antigas relacionadas ao `app_websocket`.

