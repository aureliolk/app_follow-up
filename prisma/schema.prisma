generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["conversation_schema", "follow_up_schema", "products_schema", "prompts_schema", "public", "workspace_schema"]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  url         String
  price       Float
  description String?
  brand       String?
  gender      String?
  image       String?
  categories  Json
  variations  Json
  active      Boolean  @default(true)
  created_at  DateTime @default(now())

  @@map("products")
  @@schema("products_schema")
}

model Prompt {
  id            String         @id @default(uuid())
  account_id    String
  created_at    DateTime       @default(now())
  is_current    Boolean?       @default(false)
  instruction   String
  promptContent PromptContent?

  @@map("prompts")
  @@schema("prompts_schema")
}

model PromptContent {
  id              String  @id @default(uuid())
  prompt_id       String  @unique
  prompt_created  String?
  prompt_removed  String?
  prompt_complete String?
  prompt          Prompt  @relation(fields: [prompt_id], references: [id])

  @@map("prompt_contents")
  @@schema("prompts_schema")
}

model FollowUpCampaign {
  id                           String   @id @default(uuid())
  name                         String
  description                  String?
  created_at                   DateTime @default(now())
  active                       Boolean  @default(true)
  isDefaultInactivity          Boolean  @default(false)
  idLumibot                    String?
  tokenAgentLumibot            String?
  ai_prompt_product_name       String?  @default("")
  ai_prompt_target_audience    String?  @default("")
  ai_prompt_pain_point         String?  @default("")
  ai_prompt_main_benefit       String?  @default("")
  ai_prompt_tone_of_voice      String?  @default("")
  ai_prompt_extra_instructions String?  @default("")
  ai_prompt_cta_link           String?  @default("")
  ai_prompt_cta_text           String?  @default("")

  rules                        WorkspaceAiFollowUpRule[] @relation("CampaignToRules")
  stages     FollowUpFunnelStage[]       @relation("FollowUpCampaignToFollowUpFunnelStage")
  follow_ups FollowUp[]
  workspaces WorkspaceFollowUpCampaign[]
  eventMappings EventFollowUpMapping[]

  @@index([isDefaultInactivity])
  @@map("follow_up_campaigns")
  @@schema("follow_up_schema")
}

model FollowUpFunnelStage {
  id                String           @id @default(uuid())
  name              String
  order             Int              @default(0)
  created_at        DateTime         @default(now())
  campaign_id       String           @default("")
  requires_response Boolean          @default(false)
  description       String
  campaign          FollowUpCampaign @relation("FollowUpCampaignToFollowUpFunnelStage", fields: [campaign_id], references: [id])
  steps             FollowUpStep[]

  @@map("follow_up_funnel_stages")
  @@schema("follow_up_schema")
}

model FollowUpStep {
  id              String              @id @default(uuid())
  funnel_stage_id String
  template_name   String              @default("")
  wait_time       String
  wait_time_ms    Int
  message_content String
  status          String              @default("created")
  created_at      DateTime            @default(now())
  order           Int                 @default(0)
  category        String
  is_hsm          Boolean             @default(false)
  funnel_stage    FollowUpFunnelStage @relation(fields: [funnel_stage_id], references: [id])

  @@map("follow_up_steps")
  @@schema("follow_up_schema")
}

model FollowUp {
  id                     String    @id @default(uuid())
  campaign_id            String?
  client_id              String
  status                 String    @default("active")
  started_at             DateTime  @default(now())
  updated_at             DateTime  @updatedAt
  next_message_at        DateTime?
  completed_at           DateTime?
  current_stage_id       String?
  waiting_for_response   Boolean   @default(false)
  last_response          String?
  last_response_at       DateTime?
  last_client_message_at DateTime?
  next_evaluation_at     DateTime?
  paused_reason          String?
  ai_suggestion          String?

  workspace_id String
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  client Client @relation("ClientToFollowUp", fields: [client_id], references: [id], onDelete: Cascade)

  current_sequence_step_order Int?      @default(0)
  next_sequence_message_at    DateTime?

  messages    FollowUpMessage[]
  campaign    FollowUpCampaign?    @relation(fields: [campaign_id], references: [id])
  ai_analyses FollowUpAIAnalysis[]

  @@index([client_id])
  @@index([status])
  @@map("follow_ups")
  @@schema("follow_up_schema")
}

model FollowUpMessage {
  id              String    @id @default(uuid())
  follow_up_id    String
  content         String
  sent_at         DateTime  @default(now())
  delivered       Boolean   @default(false)
  delivered_at    DateTime?
  is_from_client  Boolean   @default(false)
  step_id         String?
  follow_up       FollowUp  @relation(fields: [follow_up_id], references: [id], onDelete: Cascade)
  error_sending   String?
  is_ai_generated Boolean   @default(false)
  template_used   String?

  @@index([follow_up_id])
  @@map("follow_up_messages")
  @@schema("follow_up_schema")
}

model FollowUpAIAnalysis {
  id              String   @id @default(uuid())
  follow_up_id    String
  message_id      String?
  sentiment       String
  intent          String
  topics          String[]
  next_action     String
  suggested_stage String?
  created_at      DateTime @default(now())
  follow_up       FollowUp @relation(fields: [follow_up_id], references: [id], onDelete: Cascade)

  @@index([follow_up_id])
  @@map("follow_up_ai_analyses")
  @@schema("follow_up_schema")
}

model User {
  id                String                @id @default(uuid())
  name              String?
  email             String                @unique
  email_verified    DateTime?             @map("email_verified")
  image             String?
  password          String?
  created_at        DateTime              @default(now()) @map("created_at")
  updated_at        DateTime              @updatedAt @map("updated_at")
  is_super_admin    Boolean               @default(false) @map("is_super_admin")
  accounts          Account[]
  sessions          Session[]
  created_tokens    WorkspaceApiToken[]
  invitations       WorkspaceInvitation[]
  workspace_members WorkspaceMember[]
  created_webhooks  WorkspaceWebhook[]
  owned_workspaces  Workspace[]           @relation("WorkspaceOwner")

  @@map("users")
  @@schema("workspace_schema")
}

model Account {
  id                  String  @id @default(uuid())
  user_id             String  @map("user_id")
  type                String
  provider            String
  provider_account_id String  @map("provider_account_id")
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String? @map("token_type")
  scope               String?
  id_token            String?
  session_state       String? @map("session_state")
  user                User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id], name: "provider_provider_account_id")
  @@map("accounts")
  @@schema("workspace_schema")
}

model Session {
  id            String   @id @default(uuid())
  session_token String   @unique @map("session_token")
  user_id       String   @map("user_id")
  expires       DateTime
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@schema("workspace_schema")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
  @@schema("workspace_schema")
}

model Workspace {
  id                  String                      @id @default(uuid())
  name                String
  slug                String                      @unique
  owner_id            String
  created_at          DateTime                    @default(now())
  updated_at          DateTime                    @updatedAt
  api_tokens          WorkspaceApiToken[]
  follow_up_campaigns WorkspaceFollowUpCampaign[]
  follow_ups          FollowUp[]
  invitations         WorkspaceInvitation[]
  members             WorkspaceMember[]
  webhooks            WorkspaceWebhook[]
  campaigns           Campaign[]
  owner               User                        @relation("WorkspaceOwner", fields: [owner_id], references: [id])
  eventFollowUpMappings EventFollowUpMapping[]

  clients       Client[]       @relation("WorkspaceToClient")
  conversations Conversation[] @relation("WorkspaceToConversation")

  ai_follow_up_rules WorkspaceAiFollowUpRule[]
  abandonedCartRules AbandonedCartRule[]

  ai_default_system_prompt String? @db.Text
  ai_model_preference      String?
  webhook_ingress_secret   String? @unique

  ai_name String? @default("Beatriz") @map("ai_name")

  google_refresh_token           String?   @map("google_refresh_token")
  google_access_token_expires_at DateTime? @map("google_access_token_expires_at")
  google_calendar_scopes         String[]  @map("google_calendar_scopes")
  google_account_email           String?   @map("google_account_email")

  active_whatsapp_integration_type WhatsappIntegrationType @default(WHATSAPP_CLOUD_API) @map("active_whatsapp_integration_type")

  whatsappPhoneNumberId      String? @map("whatsapp_phone_number_id")
  whatsappBusinessAccountId  String? @map("whatsapp_business_account_id")
  whatsappAccessToken        String? @map("whatsapp_access_token")
  whatsappAppSecret          String? @map("whatsapp_app_secret")
  whatsappWebhookVerifyToken String? @map("whatsapp_webhook_verify_token")
  whatsappWebhookRouteToken  String? @unique @map("whatsapp_webhook_route_token")

  evolution_api_endpoint      String? @map("evolution_api_endpoint")
  evolution_api_key           String? @map("evolution_api_key")
  evolution_api_instance_name String? @map("evolution_api_instance_name")

  tags WorkspaceTag[]

  @@map("workspaces")
  @@schema("workspace_schema")
}

model WorkspaceMember {
  id           String    @id @default(uuid())
  workspace_id String
  user_id      String
  role         String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  user         User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  @@unique([workspace_id, user_id])
  @@map("workspace_members")
  @@schema("workspace_schema")
}

model WorkspaceInvitation {
  id           String           @id @default(uuid())
  workspace_id String
  email        String
  role         String
  token        String           @unique
  expires_at   DateTime
  created_at   DateTime         @default(now())
  invited_by   String
  inviter      User             @relation(fields: [invited_by], references: [id])
  workspace    Workspace        @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  status       InvitationStatus @default(PENDING)
  updated_at   DateTime         @updatedAt

  @@unique([workspace_id, email])
  @@map("workspace_invitations")
  @@schema("workspace_schema")
}

model WorkspaceFollowUpCampaign {
  id           String           @id @default(uuid())
  workspace_id String
  campaign_id  String
  created_at   DateTime         @default(now())
  workspace    Workspace        @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  campaign     FollowUpCampaign @relation(fields: [campaign_id], references: [id], onDelete: Cascade)

  @@unique([workspace_id, campaign_id])
  @@map("workspace_follow_up_campaigns")
  @@schema("workspace_schema")
}

model WorkspaceApiToken {
  id           String    @id @default(uuid())
  workspace_id String
  name         String
  token        String    @unique
  created_at   DateTime  @default(now())
  expires_at   DateTime?
  last_used_at DateTime?
  revoked      Boolean   @default(false)
  created_by   String
  creator      User      @relation(fields: [created_by], references: [id], onDelete: Cascade)
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  @@index([workspace_id])
  @@map("workspace_api_tokens")
  @@schema("workspace_schema")
}

model WorkspaceWebhook {
  id           String    @id @default(uuid())
  workspace_id String
  name         String
  url          String
  secret       String
  events       String[]
  active       Boolean   @default(true)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  last_used_at DateTime?
  created_by   String
  creator      User      @relation(fields: [created_by], references: [id], onDelete: Cascade)
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  @@index([workspace_id])
  @@map("workspace_webhooks")
  @@schema("workspace_schema")
}

model WorkspaceAiFollowUpRule {
  id           String    @id @default(uuid())
  workspace_id String
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  followUpCampaignId String?
  followUpCampaign   FollowUpCampaign? @relation("CampaignToRules", fields: [followUpCampaignId], references: [id], onDelete: Cascade)

  delay_milliseconds BigInt
  message_content    String @db.Text

  sequenceOrder      Int      @default(0)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([followUpCampaignId, sequenceOrder])
  @@index([workspace_id, created_at])
  @@map("workspace_ai_follow_up_rules")
  @@schema("workspace_schema")
}

model Client {
  id           String    @id @default(uuid())
  workspace_id String
  workspace    Workspace @relation("WorkspaceToClient", fields: [workspace_id], references: [id], onDelete: Cascade)

  external_id  String?
  phone_number String?
  name         String?
  channel      String?

  follow_ups FollowUp[] @relation("ClientToFollowUp")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  conversations Conversation[] @relation("ClientToConversation")

  metadata Json?

  @@unique([workspace_id, phone_number, channel])
  @@index([workspace_id])
  @@index([external_id])
  @@index([phone_number])
  @@map("clients")
  @@schema("conversation_schema")
}

model Conversation {
  id           String    @id @default(uuid())
  workspace_id String
  workspace    Workspace @relation("WorkspaceToConversation", fields: [workspace_id], references: [id], onDelete: Cascade)
  client_id    String
  client       Client    @relation("ClientToConversation", fields: [client_id], references: [id], onDelete: Cascade)

  channel                 String?
  channel_conversation_id String?
  status                  ConversationStatus @default(ACTIVE)
  is_ai_active            Boolean            @default(true)

  last_message_at DateTime?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  messages Message[] @relation("ConversationToMessage")

  metadata Json?

  @@unique([workspace_id, client_id, channel])
  @@unique([workspace_id, channel_conversation_id])
  @@index([workspace_id])
  @@index([client_id])
  @@index([channel_conversation_id])
  @@index([status])
  @@index([last_message_at])
  @@map("conversations")
  @@schema("conversation_schema")
}

model Message {
  id                 String            @id @default(uuid())
  conversation_id    String
  conversation       Conversation      @relation("ConversationToMessage", fields: [conversation_id], references: [id], onDelete: Cascade)
  sender_type        MessageSenderType
  content            String?           @db.Text
  ai_media_analysis  String?           @db.Text
  timestamp          DateTime          @default(now())
  channel_message_id String?
  metadata           Json?

  media_url       String? @default("")
  media_mime_type String? @default("")
  media_filename  String? @default("")

  status            String?   @default("PENDING")
  providerMessageId String?   @map("provider_message_id")
  sentAt            DateTime? @map("sent_at")
  errorMessage      String?   @map("error_message") @db.Text

  @@index([conversation_id])
  @@index([timestamp])
  @@map("messages")
  @@schema("conversation_schema")
}

enum ConversationStatus {
  ACTIVE
  PAUSED_BY_USER
  PAUSED_BY_AI
  CLOSED

  @@schema("conversation_schema")
}

enum MessageSenderType {
  CLIENT
  AI
  SYSTEM
  AGENT

  @@schema("conversation_schema")
}

enum FollowUpStatus {
  ACTIVE
  PAUSED
  COMPLETED
  CONVERTED
  CANCELLED
  FAILED

  @@schema("follow_up_schema")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED

  @@schema("workspace_schema")
}

enum WhatsappIntegrationType {
  WHATSAPP_CLOUD_API
  EVOLUTION_API

  @@map("whatsapp_integration_type")
  @@schema("workspace_schema")
}

model Campaign {
  id          String    @id @default(cuid())
  name        String
  message     String    @db.Text
  status      String    @default("PENDING")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  workspaceId String    @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  sendIntervalSeconds  Int    @map("send_interval_seconds")
  allowedSendStartTime String @map("allowed_send_start_time")
  allowedSendEndTime   String @map("allowed_send_end_time")
  allowedSendDays      String @map("allowed_send_days")

  isTemplate       Boolean @default(false) @map("is_template")
  templateName     String? @map("template_name")
  templateCategory String? @map("template_category")

  contacts CampaignContact[]

  @@map("campaigns")
  @@schema("workspace_schema")
}

model CampaignContact {
  id          String    @id @default(cuid())
  campaignId  String    @map("campaign_id")
  campaign    Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contactInfo String    @map("contact_info")
  contactName String?   @map("contact_name")
  status      String    @default("PENDING")
  sentAt      DateTime? @map("sent_at")
  error       String?   @db.Text
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@index([campaignId, status])
  @@map("campaign_contacts")
  @@schema("workspace_schema")
}

model WorkspaceTag {
  id           String   @id @default(cuid())
  name         String
  workspace_id String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  workspace Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  @@unique([workspace_id, name])
  @@index([workspace_id])
  @@schema("workspace_schema")
}

model EventFollowUpMapping {
  id           String    @id @default(uuid())
  workspaceId String
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  eventName         String
  followUpCampaignId String
  followUpCampaign   FollowUpCampaign @relation(fields: [followUpCampaignId], references: [id], onDelete: Cascade)

  isActive   Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([workspaceId, eventName])
  @@index([workspaceId, isActive])
  @@map("event_follow_up_mappings")
  @@schema("workspace_schema")
}

model AbandonedCartRule {
  id                 String   @id @default(uuid())
  workspace_id       String
  workspace          Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  delay_milliseconds BigInt   // Time to wait after the event
  message_content    String   @db.Text // Message to send
  sequenceOrder      Int      @default(0) // Order if multiple rules exist

  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  @@index([workspace_id, sequenceOrder]) // Index for efficient lookup
  @@map("abandoned_cart_rules")          // Table name in the DB
  @@schema("workspace_schema")           // Place in the same schema
}
