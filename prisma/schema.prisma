generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["conversation_schema", "follow_up_schema", "products_schema", "prompts_schema", "public", "workspace_schema"]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  url         String
  price       Float
  description String?
  brand       String?
  gender      String?
  image       String?
  categories  Json
  variations  Json
  active      Boolean  @default(true)
  created_at  DateTime @default(now())

  @@map("products")
  @@schema("products_schema")
}

model Prompt {
  id            String         @id @default(uuid())
  account_id    String
  created_at    DateTime       @default(now())
  is_current    Boolean?       @default(false)
  instruction   String
  promptContent PromptContent?

  @@map("prompts")
  @@schema("prompts_schema")
}

model PromptContent {
  id              String  @id @default(uuid())
  prompt_id       String  @unique
  prompt_created  String?
  prompt_removed  String?
  prompt_complete String?
  prompt          Prompt  @relation(fields: [prompt_id], references: [id])

  @@map("prompt_contents")
  @@schema("prompts_schema")
}

model FollowUpCampaign {
  id                           String   @id @default(uuid())
  name                         String
  description                  String?
  created_at                   DateTime @default(now())
  active                       Boolean  @default(true)
  idLumibot                    String?
  tokenAgentLumibot            String?
  ai_prompt_product_name       String?  @default("")
  ai_prompt_target_audience    String?  @default("")
  ai_prompt_pain_point         String?  @default("")
  ai_prompt_main_benefit       String?  @default("")
  ai_prompt_tone_of_voice      String?  @default("")
  ai_prompt_extra_instructions String?  @default("")
  ai_prompt_cta_link           String?  @default("")
  ai_prompt_cta_text           String?  @default("")

  stages     FollowUpFunnelStage[]       @relation("FollowUpCampaignToFollowUpFunnelStage")
  follow_ups FollowUp[]
  workspaces WorkspaceFollowUpCampaign[] // Adicionada relação com a tabela de junção

  @@map("follow_up_campaigns")
  @@schema("follow_up_schema")
}

model FollowUpFunnelStage {
  id                String           @id @default(uuid())
  name              String
  order             Int              @default(0)
  created_at        DateTime         @default(now())
  campaign_id       String           @default("")
  requires_response Boolean          @default(false)
  description       String
  campaign          FollowUpCampaign @relation("FollowUpCampaignToFollowUpFunnelStage", fields: [campaign_id], references: [id])
  steps             FollowUpStep[]

  @@map("follow_up_funnel_stages")
  @@schema("follow_up_schema")
}

model FollowUpStep {
  id              String              @id @default(uuid())
  funnel_stage_id String
  template_name   String              @default("")
  wait_time       String
  wait_time_ms    Int
  message_content String
  status          String              @default("created")
  created_at      DateTime            @default(now())
  order           Int                 @default(0)
  category        String
  is_hsm          Boolean             @default(false)
  funnel_stage    FollowUpFunnelStage @relation(fields: [funnel_stage_id], references: [id])

  @@map("follow_up_steps")
  @@schema("follow_up_schema")
}

model FollowUp {
  id                     String    @id @default(uuid())
  campaign_id            String?
  client_id              String
  // Manter status existente, usaremos 'ACTIVE', 'COMPLETED', 'CANCELLED', e adicionaremos 'CONVERTED' via API
  status                 String    @default("active")
  started_at             DateTime  @default(now())
  updated_at             DateTime  @updatedAt
  next_message_at        DateTime? // Pode ser usado pela IA ou removido se confuso
  completed_at           DateTime?
  current_stage_id       String? // Mantém para organização visual (opcional)
  waiting_for_response   Boolean   @default(false) // Lógica de inatividade antiga, pode ser removida/ignorada
  last_response          String? // Lógica de inatividade antiga
  last_response_at       DateTime? // Lógica de inatividade antiga
  last_client_message_at DateTime? // Mantém, útil para IA
  next_evaluation_at     DateTime? // Lógica de inatividade antiga
  paused_reason          String?
  ai_suggestion          String?

  workspace_id String
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  client Client @relation("ClientToFollowUp", fields: [client_id], references: [id], onDelete: Cascade)

  // --- NOVOS CAMPOS PARA SEQUÊNCIA ---
  current_sequence_step_order Int?      @default(0) // Rastreia a ordem do último passo da *sequência* enviado (0 = nenhum ainda)
  next_sequence_message_at    DateTime? // Quando a próxima mensagem *da sequência* está agendada

  // --- RELAÇÕES EXISTENTES ---
  messages    FollowUpMessage[]
  campaign    FollowUpCampaign?    @relation(fields: [campaign_id], references: [id])
  ai_analyses FollowUpAIAnalysis[]

  @@index([client_id])
  @@index([status])
  @@map("follow_ups")
  @@schema("follow_up_schema")
}

model FollowUpMessage {
  id              String    @id @default(uuid())
  follow_up_id    String
  content         String
  sent_at         DateTime  @default(now())
  delivered       Boolean   @default(false)
  delivered_at    DateTime?
  is_from_client  Boolean   @default(false)
  step_id         String?
  follow_up       FollowUp  @relation(fields: [follow_up_id], references: [id], onDelete: Cascade)
  error_sending   String?
  is_ai_generated Boolean   @default(false)
  template_used   String?

  @@index([follow_up_id])
  @@map("follow_up_messages")
  @@schema("follow_up_schema")
}

model FollowUpAIAnalysis {
  id              String   @id @default(uuid())
  follow_up_id    String
  message_id      String?
  sentiment       String
  intent          String
  topics          String[]
  next_action     String
  suggested_stage String?
  created_at      DateTime @default(now())
  follow_up       FollowUp @relation(fields: [follow_up_id], references: [id], onDelete: Cascade)

  @@index([follow_up_id])
  @@map("follow_up_ai_analyses")
  @@schema("follow_up_schema")
}

model User {
  id                String                @id @default(uuid())
  name              String?
  email             String                @unique
  email_verified    DateTime?             @map("email_verified")
  image             String?
  password          String?
  created_at        DateTime              @default(now()) @map("created_at")
  updated_at        DateTime              @updatedAt @map("updated_at")
  is_super_admin    Boolean               @default(false) @map("is_super_admin")
  accounts          Account[]
  sessions          Session[]
  created_tokens    WorkspaceApiToken[]
  invitations       WorkspaceInvitation[]
  workspace_members WorkspaceMember[]
  created_webhooks  WorkspaceWebhook[]
  owned_workspaces  Workspace[]           @relation("WorkspaceOwner")

  @@map("users")
  @@schema("workspace_schema")
}

model Account {
  id                  String  @id @default(uuid())
  user_id             String  @map("user_id")
  type                String
  provider            String
  provider_account_id String  @map("provider_account_id")
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String? @map("token_type")
  scope               String?
  id_token            String?
  session_state       String? @map("session_state")
  user                User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id], name: "provider_provider_account_id")
  @@map("accounts")
  @@schema("workspace_schema")
}

model Session {
  id            String   @id @default(uuid())
  session_token String   @unique @map("session_token")
  user_id       String   @map("user_id")
  expires       DateTime
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@schema("workspace_schema")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
  @@schema("workspace_schema")
}

model Workspace {
  id                  String                      @id @default(uuid())
  name                String
  slug                String                      @unique
  owner_id            String
  created_at          DateTime                    @default(now())
  updated_at          DateTime                    @updatedAt
  api_tokens          WorkspaceApiToken[]
  follow_up_campaigns WorkspaceFollowUpCampaign[]
  follow_ups          FollowUp[] // <<< ADICIONAR/CORRIGIR ESTA LINHA
  invitations         WorkspaceInvitation[]
  members             WorkspaceMember[]
  webhooks            WorkspaceWebhook[]
  campaigns           Campaign[] // Relação reversa para Campaigns
  owner               User                        @relation("WorkspaceOwner", fields: [owner_id], references: [id])

  clients       Client[]       @relation("WorkspaceToClient")
  conversations Conversation[] @relation("WorkspaceToConversation")

  ai_follow_up_rules WorkspaceAiFollowUpRule[]

  ai_default_system_prompt String? @db.Text
  ai_model_preference      String?
  webhook_ingress_secret   String? @unique

  // --- Campos para WhatsApp Cloud API --- 
  whatsappPhoneNumberId      String? @map("whatsapp_phone_number_id")
  whatsappBusinessAccountId  String? @map("whatsapp_business_account_id") // WABA ID
  whatsappAccessToken        String? @map("whatsapp_access_token") // PRECISA CRIPTOGRAFAR
  whatsappAppSecret          String? @map("whatsapp_app_secret") // Armazena o App Secret (criptografado)
  whatsappWebhookVerifyToken String? @map("whatsapp_webhook_verify_token") // Token para validar seu webhook
  whatsappWebhookRouteToken  String? @unique @map("whatsapp_webhook_route_token") // Token único para URL dinâmica do webhook
  
  // --- NOVO CAMPO PARA NOME DA IA ---
  ai_name                    String? @default("Beatriz") @map("ai_name")

  // --- Fim Campos WhatsApp --- 

  tags    WorkspaceTag[]

  @@map("workspaces")
  @@schema("workspace_schema")
}

model WorkspaceMember {
  id           String    @id @default(uuid())
  workspace_id String
  user_id      String
  role         String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  user         User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  @@unique([workspace_id, user_id])
  @@map("workspace_members")
  @@schema("workspace_schema")
}

model WorkspaceInvitation {
  id           String           @id @default(uuid())
  workspace_id String
  email        String
  role         String
  token        String           @unique
  expires_at   DateTime
  created_at   DateTime         @default(now())
  invited_by   String
  inviter      User             @relation(fields: [invited_by], references: [id])
  workspace    Workspace        @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  status       InvitationStatus @default(PENDING)
  updated_at   DateTime         @updatedAt

  @@unique([workspace_id, email])
  @@map("workspace_invitations")
  @@schema("workspace_schema")
}

model WorkspaceFollowUpCampaign {
  id           String           @id @default(uuid())
  workspace_id String
  campaign_id  String
  created_at   DateTime         @default(now())
  workspace    Workspace        @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  campaign     FollowUpCampaign @relation(fields: [campaign_id], references: [id], onDelete: Cascade) // Adicionada relação com a campanha

  @@unique([workspace_id, campaign_id])
  @@map("workspace_follow_up_campaigns")
  @@schema("workspace_schema")
}

model WorkspaceApiToken {
  id           String    @id @default(uuid())
  workspace_id String
  name         String
  token        String    @unique
  created_at   DateTime  @default(now())
  expires_at   DateTime?
  last_used_at DateTime?
  revoked      Boolean   @default(false)
  created_by   String
  creator      User      @relation(fields: [created_by], references: [id], onDelete: Cascade)
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  @@index([workspace_id])
  @@map("workspace_api_tokens")
  @@schema("workspace_schema")
}

model WorkspaceWebhook {
  id           String    @id @default(uuid())
  workspace_id String
  name         String
  url          String
  secret       String
  events       String[]
  active       Boolean   @default(true)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  last_used_at DateTime?
  created_by   String
  creator      User      @relation(fields: [created_by], references: [id], onDelete: Cascade)
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  @@index([workspace_id])
  @@map("workspace_webhooks")
  @@schema("workspace_schema")
}

model WorkspaceAiFollowUpRule {
  id           String    @id @default(uuid())
  workspace_id String
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  // Armazenamos como BigInt para precisão, mas converteremos para/de string na API/UI
  delay_milliseconds BigInt
  message_content    String @db.Text

  // Opcional: Para ordenar regras se houver múltiplas futuramente
  // order               Int      @default(0)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([workspace_id, created_at]) // Índice para buscar por workspace ordenado
  @@map("workspace_ai_follow_up_rules")
  @@schema("workspace_schema")
}

model Client {
  id           String    @id @default(uuid())
  workspace_id String // A qual workspace pertence
  workspace    Workspace @relation("WorkspaceToClient", fields: [workspace_id], references: [id], onDelete: Cascade)

  external_id  String? // ID do contato no sistema de origem (ex: Chatwoot Contact ID: body.sender.id)
  phone_number String? // Número de telefone (ex: body.sender.phone_number) - Pode ser o identificador principal
  name         String? // Nome do contato (ex: body.sender.name)
  channel      String? // Canal de origem (ex: "WHATSAPP", "CHATWOOT", etc. - derivado de body.conversation.channel)

  follow_ups FollowUp[] @relation("ClientToFollowUp")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relação com conversas
  conversations Conversation[] @relation("ClientToConversation")

  // JSON para dados adicionais do payload original
  metadata Json?

  @@unique([workspace_id, phone_number, channel]) // Garante cliente único por telefone+canal dentro do workspace
  @@index([workspace_id])
  @@index([external_id])
  @@index([phone_number])
  @@map("clients")
  @@schema("conversation_schema")
}

model Conversation {
  id           String    @id @default(uuid())
  workspace_id String // A qual workspace pertence (para filtros rápidos)
  workspace    Workspace @relation("WorkspaceToConversation", fields: [workspace_id], references: [id], onDelete: Cascade)
  client_id    String // A qual cliente pertence
  client       Client    @relation("ClientToConversation", fields: [client_id], references: [id], onDelete: Cascade)

  channel                 String? // Canal da conversa (ex: "WHATSAPP")
  channel_conversation_id String? // ID da conversa no sistema de origem (ex: Chatwoot Conversation ID: body.conversation.id)
  status                  ConversationStatus @default(ACTIVE) // Status atual (ativa, pausada, fechada)
  is_ai_active            Boolean            @default(true) // Se a IA deve responder nesta conversa

  last_message_at DateTime? // Timestamp da última mensagem (para ordenação)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  // Relação com mensagens
  messages Message[] @relation("ConversationToMessage")

  // JSON para dados adicionais (ex: meta da conversa do Chatwoot)
  metadata Json?

  @@unique([workspace_id, client_id, channel])
  @@unique([workspace_id, channel_conversation_id])
  @@index([workspace_id])
  @@index([client_id])
  @@index([channel_conversation_id])
  @@index([status])
  @@index([last_message_at])
  @@map("conversations")
  @@schema("conversation_schema")
}

// Modelo para cada mensagem individual
model Message {
  id                 String    @id @default(uuid())
  conversation_id    String
  conversation       Conversation @relation("ConversationToMessage", fields: [conversation_id], references: [id], onDelete: Cascade)
  sender_type        MessageSenderType // CLIENT, AI, SYSTEM
  content            String?    @db.Text // Text content or placeholder like [Imagem Recebida]
  ai_media_analysis  String?    @db.Text // AI-generated description/transcription
  timestamp          DateTime  @default(now())
  channel_message_id String?    // ID from the external channel (e.g., WhatsApp WAMID)
  metadata           Json?     // Any additional metadata (e.g., webhook payload, AI confidence)

  // --- Campos para Anexos ---
  media_url        String?  @default("") // URL do anexo (ex: S3)
  media_mime_type  String?  @default("") // Tipo MIME do anexo (ex: image/jpeg)
  media_filename   String?  @default("") // Nome original do arquivo (útil para documentos)

  // --- Campos para Status de Envio (para mensagens enviadas pelo sistema/AI) ---
  status             String?   @default("PENDING") // PENDING, SENT, FAILED, DELIVERED (opcional), READ (opcional)
  providerMessageId  String?   @map("provider_message_id") // ID da mensagem no provedor (ex: WhatsApp ID)
  sentAt             DateTime? @map("sent_at") // Quando foi enviada pela nossa API
  errorMessage       String?   @db.Text @map("error_message") // Mensagem de erro se o envio falhar

  @@index([conversation_id])
  @@index([timestamp])
  @@map("messages")
  @@schema("conversation_schema")
}

enum ConversationStatus {
  ACTIVE
  PAUSED_BY_USER // Pausado manualmente pelo operador
  PAUSED_BY_AI // Pausado pela IA (ex: esperando ação humana) - Opcional
  CLOSED // Conversa finalizada

  @@schema("conversation_schema")
}

enum MessageSenderType {
  CLIENT // Mensagem vinda do cliente final
  AI // Mensagem gerada pela IA do sistema
  SYSTEM // Mensagem interna do sistema (ex: "IA pausada", "Conversa iniciada")
  AGENT

  @@schema("conversation_schema")
}

// Adicione esta definição de enum (idealmente perto do modelo FollowUp)
enum FollowUpStatus {
  ACTIVE // Sequência em andamento
  PAUSED // Pausado manualmente ou por alguma condição
  COMPLETED // Todos os passos da sequência foram enviados
  CONVERTED // O cliente converteu (parou a sequência)
  CANCELLED // A sequência foi cancelada manualmente
  FAILED // Ocorreu um erro irrecuperável (opcional)

  @@schema("follow_up_schema") // Certifique-se de colocar no schema correto!
}

// <<< Adicionar Enum para Status do Convite >>>
enum InvitationStatus {
  PENDING // Convite enviado, aguardando aceite
  ACCEPTED // Convite aceito, usuário se tornou membro
  EXPIRED // Convite expirou antes de ser aceito
  REVOKED // Convite cancelado pelo admin antes de ser aceito

  @@schema("workspace_schema") // Definir no schema correto
}

model Campaign {
  id          String    @id @default(cuid()) // Usando cuid() como padrão no projeto
  name        String
  message     String    @db.Text // Usar Text para mensagens potencialmente longas
  status      String    @default("PENDING") // Ex: PENDING, PROCESSING, COMPLETED, FAILED, PAUSED, CANCELLED
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  workspaceId String    @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  // Campos de agendamento
  sendIntervalSeconds  Int    @map("send_interval_seconds") // Intervalo em segundos
  allowedSendStartTime String @map("allowed_send_start_time") // Formato "HH:MM" (ex: "09:00")
  allowedSendEndTime   String @map("allowed_send_end_time") // Formato "HH:MM" (ex: "18:00")
  allowedSendDays      String @map("allowed_send_days") // Ex: "1,2,3,4,5" ou JSON [1,2,3,4,5]

  // Campos para Template HSM (Opcionais)
  isTemplate       Boolean @default(false) @map("is_template")
  templateName     String? @map("template_name") // Nome exato do template HSM
  templateCategory String? @map("template_category") // Categoria do template (ex: UTILITY)

  // Relação com os contatos da campanha
  contacts CampaignContact[]

  @@map("campaigns")
  @@schema("workspace_schema") // Adicionando ao schema do workspace
}

model CampaignContact {
  id          String    @id @default(cuid())
  campaignId  String    @map("campaign_id")
  campaign    Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contactInfo String    @map("contact_info") // Telefone ou outro identificador
  contactName String?   @map("contact_name") // Nome do contato (opcional)
  status      String    @default("PENDING") // Ex: PENDING, SENT, FAILED
  sentAt      DateTime? @map("sent_at")
  error       String?   @db.Text // Armazenar mensagens de erro longas
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@index([campaignId, status]) // Índice para buscar contatos pendentes rapidamente
  @@map("campaign_contacts")
  @@schema("workspace_schema") // Adicionando ao schema do workspace
}

model WorkspaceTag {
  id           String    @id @default(cuid())
  name         String    // Nome da tag (ex: "Lead Quente")
  workspace_id String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  @@unique([workspace_id, name]) // Garante que o nome da tag seja único por workspace
  @@index([workspace_id])
  @@schema("workspace_schema")
}
