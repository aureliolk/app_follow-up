generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["conversation_schema", "follow_up_schema", "products_schema", "prompts_schema", "public", "workspace_schema"]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  url         String
  price       Float
  description String?
  brand       String?
  gender      String?
  image       String?
  categories  Json
  variations  Json
  active      Boolean  @default(true)
  created_at  DateTime @default(now())

  @@map("products")
  @@schema("products_schema")
}

model Prompt {
  id            String         @id @default(uuid())
  account_id    String
  created_at    DateTime       @default(now())
  is_current    Boolean?       @default(false)
  instruction   String
  promptContent PromptContent?

  @@map("prompts")
  @@schema("prompts_schema")
}

model PromptContent {
  id              String  @id @default(uuid())
  prompt_id       String  @unique
  prompt_created  String?
  prompt_removed  String?
  prompt_complete String?
  prompt          Prompt  @relation(fields: [prompt_id], references: [id])

  @@map("prompt_contents")
  @@schema("prompts_schema")
}

model FollowUpCampaign {
  id                           String                      @id @default(uuid())
  name                         String
  description                  String?
  created_at                   DateTime                    @default(now())
  active                       Boolean                     @default(true)
  idLumibot                    String?
  tokenAgentLumibot            String?
  ai_prompt_product_name       String?                     @default("")
  ai_prompt_target_audience    String?                     @default("")
  ai_prompt_pain_point         String?                     @default("")
  ai_prompt_main_benefit       String?                     @default("")
  ai_prompt_tone_of_voice      String?                     @default("")
  ai_prompt_extra_instructions String?                     @default("")
  ai_prompt_cta_link           String?                     @default("")
  ai_prompt_cta_text           String?                     @default("")
  isDefaultInactivity          Boolean                     @default(false)
  stages                       FollowUpFunnelStage[]       @relation("FollowUpCampaignToFollowUpFunnelStage")
  follow_ups                   FollowUp[]
  eventMappings                EventFollowUpMapping[]
  rules                        WorkspaceAiFollowUpRule[]   @relation("CampaignToRules")
  workspaces                   WorkspaceFollowUpCampaign[]

  @@index([isDefaultInactivity])
  @@map("follow_up_campaigns")
  @@schema("follow_up_schema")
}

model FollowUpFunnelStage {
  id                String           @id @default(uuid())
  name              String
  order             Int              @default(0)
  created_at        DateTime         @default(now())
  campaign_id       String           @default("")
  requires_response Boolean          @default(false)
  description       String
  campaign          FollowUpCampaign @relation("FollowUpCampaignToFollowUpFunnelStage", fields: [campaign_id], references: [id])
  steps             FollowUpStep[]

  @@map("follow_up_funnel_stages")
  @@schema("follow_up_schema")
}

model FollowUpStep {
  id              String              @id @default(uuid())
  funnel_stage_id String
  template_name   String              @default("")
  wait_time       String
  wait_time_ms    Int
  message_content String
  status          String              @default("created")
  created_at      DateTime            @default(now())
  order           Int                 @default(0)
  category        String
  is_hsm          Boolean             @default(false)
  funnel_stage    FollowUpFunnelStage @relation(fields: [funnel_stage_id], references: [id])

  @@map("follow_up_steps")
  @@schema("follow_up_schema")
}

model FollowUp {
  id                          String               @id @default(uuid())
  campaign_id                 String?
  client_id                   String
  status                      String               @default("active")
  started_at                  DateTime             @default(now())
  updated_at                  DateTime             @updatedAt
  next_message_at             DateTime?
  completed_at                DateTime?
  current_stage_id            String?
  waiting_for_response        Boolean              @default(false)
  last_response               String?
  last_response_at            DateTime?
  last_client_message_at      DateTime?
  next_evaluation_at          DateTime?
  paused_reason               String?
  ai_suggestion               String?
  current_sequence_step_order Int?                 @default(0)
  next_sequence_message_at    DateTime?
  workspace_id                String
  conversationId              String?              @unique
  ai_analyses                 FollowUpAIAnalysis[]
  messages                    FollowUpMessage[]
  campaign                    FollowUpCampaign?    @relation(fields: [campaign_id], references: [id])
  client                      Client               @relation("ClientToFollowUp", fields: [client_id], references: [id], onDelete: Cascade)
  conversation                Conversation?        @relation("ConversationToFollowUp", fields: [conversationId], references: [id])
  workspace                   Workspace            @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  @@index([client_id])
  @@index([status])
  @@map("follow_ups")
  @@schema("follow_up_schema")
}

model FollowUpMessage {
  id              String    @id @default(uuid())
  follow_up_id    String
  content         String
  sent_at         DateTime  @default(now())
  delivered       Boolean   @default(false)
  delivered_at    DateTime?
  is_from_client  Boolean   @default(false)
  step_id         String?
  error_sending   String?
  is_ai_generated Boolean   @default(false)
  template_used   String?
  follow_up       FollowUp  @relation(fields: [follow_up_id], references: [id], onDelete: Cascade)

  @@index([follow_up_id])
  @@map("follow_up_messages")
  @@schema("follow_up_schema")
}

model FollowUpAIAnalysis {
  id              String   @id @default(uuid())
  follow_up_id    String
  message_id      String?
  sentiment       String
  intent          String
  topics          String[]
  next_action     String
  suggested_stage String?
  created_at      DateTime @default(now())
  follow_up       FollowUp @relation(fields: [follow_up_id], references: [id], onDelete: Cascade)

  @@index([follow_up_id])
  @@map("follow_up_ai_analyses")
  @@schema("follow_up_schema")
}

model User {
  id                String                @id @default(uuid())
  name              String?
  email             String                @unique
  email_verified    DateTime?             @map("email_verified")
  image             String?
  password          String?
  created_at        DateTime              @default(now()) @map("created_at")
  updated_at        DateTime              @updatedAt @map("updated_at")
  is_super_admin    Boolean               @default(false) @map("is_super_admin")
  accounts          Account[]
  dealActivityLogs  DealActivityLog[]     @relation("UserActivityLogs")
  dealDocuments     DealDocument[]        @relation("UserDocuments")
  dealNotes         DealNote[]            @relation("UserDealNotes")
  dealTasks         DealTask[]            @relation("UserDealTasks")
  assignedDeals     Deal[]                @relation("UserDeals")
  sessions          Session[]
  created_tokens    WorkspaceApiToken[]
  invitations       WorkspaceInvitation[]
  workspace_members WorkspaceMember[]
  created_webhooks  WorkspaceWebhook[]
  owned_workspaces  Workspace[]           @relation("WorkspaceOwner")

  @@map("users")
  @@schema("workspace_schema")
}

model Account {
  id                  String  @id @default(uuid())
  user_id             String  @map("user_id")
  type                String
  provider            String
  provider_account_id String  @map("provider_account_id")
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String? @map("token_type")
  scope               String?
  id_token            String?
  session_state       String? @map("session_state")
  user                User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id], name: "provider_provider_account_id")
  @@map("accounts")
  @@schema("workspace_schema")
}

model Session {
  id            String   @id @default(uuid())
  session_token String   @unique @map("session_token")
  user_id       String   @map("user_id")
  expires       DateTime
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@schema("workspace_schema")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
  @@schema("workspace_schema")
}

model Workspace {
  id                                       String                      @id @default(uuid())
  name                                     String
  slug                                     String                      @unique
  owner_id                                 String
  created_at                               DateTime                    @default(now())
  updated_at                               DateTime                    @updatedAt
  ai_default_system_prompt                 String?
  ai_model_preference                      String?
  webhook_ingress_secret                   String?                     @unique
  whatsappAccessToken                      String?                     @map("whatsapp_access_token")
  whatsappBusinessAccountId                String?                     @map("whatsapp_business_account_id")
  whatsappPhoneNumberId                    String?                     @map("whatsapp_phone_number_id")
  whatsappWebhookVerifyToken               String?                     @map("whatsapp_webhook_verify_token")
  whatsappAppSecret                        String?                     @map("whatsapp_app_secret")
  whatsappWebhookRouteToken                String?                     @unique @map("whatsapp_webhook_route_token")
  ai_name                                  String?                     @default("Beatriz") @map("ai_name")
  google_access_token_expires_at           DateTime?                   @map("google_access_token_expires_at")
  google_account_email                     String?                     @map("google_account_email")
  google_calendar_scopes                   String[]                    @map("google_calendar_scopes")
  google_refresh_token                     String?                     @map("google_refresh_token")
  evolution_api_endpoint                   String?                     @map("evolution_api_endpoint")
  evolution_api_instance_name              String?                     @map("evolution_api_instance_name")
  evolution_api_key                        String?                     @map("evolution_api_key")
  google_calendar_event_conversion_enabled Boolean                     @default(false) @map("google_calendar_event_conversion_enabled")
  evolution_api_token                      String?                     @unique @map("evolution_api_token")
  evolution_webhook_route_token            String?                     @unique @map("evolution_webhook_route_token")
  ai_delay_between_messages                Int?                        @default(3000)
  ai_send_fractionated                     Boolean                     @default(true)
  nuvemshopApiKey                          String?                     @map("nuvemshop_api_key")
  nuvemshopStoreId                         String?                     @map("nuvemshop_store_id")
  clients                                  Client[]                    @relation("WorkspaceToClient")
  conversations                            Conversation[]              @relation("WorkspaceToConversation")
  follow_ups                               FollowUp[]
  quickNotes                               QuickNote[]
  tags                                     WorkspaceTag[]
  abandonedCartRules                       AbandonedCartRule[]
  abandonedCarts                           AbandonedCart[]
  ai_stages                                ai_stages[]
  campaigns                                Campaign[]
  customHttpTools                          CustomHttpTool[]
  deals                                    Deal[]
  eventFollowUpMappings                    EventFollowUpMapping[]
  pipelineStages                           PipelineStage[]
  ai_follow_up_rules                       WorkspaceAiFollowUpRule[]
  api_tokens                               WorkspaceApiToken[]
  follow_up_campaigns                      WorkspaceFollowUpCampaign[]
  invitations                              WorkspaceInvitation[]
  members                                  WorkspaceMember[]
  webhooks                                 WorkspaceWebhook[]
  owner                                    User                        @relation("WorkspaceOwner", fields: [owner_id], references: [id])

  @@map("workspaces")
  @@schema("workspace_schema")
}

model WorkspaceMember {
  id           String    @id @default(uuid())
  workspace_id String
  user_id      String
  role         String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  user         User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  @@unique([workspace_id, user_id])
  @@map("workspace_members")
  @@schema("workspace_schema")
}

model WorkspaceInvitation {
  id           String           @id @default(uuid())
  workspace_id String
  email        String
  role         String
  token        String           @unique
  expires_at   DateTime
  created_at   DateTime         @default(now())
  invited_by   String
  status       InvitationStatus @default(PENDING)
  updated_at   DateTime         @updatedAt
  inviter      User             @relation(fields: [invited_by], references: [id])
  workspace    Workspace        @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  @@unique([workspace_id, email])
  @@map("workspace_invitations")
  @@schema("workspace_schema")
}

model WorkspaceFollowUpCampaign {
  id           String           @id @default(uuid())
  workspace_id String
  campaign_id  String
  created_at   DateTime         @default(now())
  campaign     FollowUpCampaign @relation(fields: [campaign_id], references: [id], onDelete: Cascade)
  workspace    Workspace        @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  @@unique([workspace_id, campaign_id])
  @@map("workspace_follow_up_campaigns")
  @@schema("workspace_schema")
}

model WorkspaceApiToken {
  id           String    @id @default(uuid())
  workspace_id String
  name         String
  token        String    @unique
  created_at   DateTime  @default(now())
  expires_at   DateTime?
  last_used_at DateTime?
  revoked      Boolean   @default(false)
  created_by   String
  creator      User      @relation(fields: [created_by], references: [id], onDelete: Cascade)
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  @@index([workspace_id])
  @@map("workspace_api_tokens")
  @@schema("workspace_schema")
}

model WorkspaceWebhook {
  id           String    @id @default(uuid())
  workspace_id String
  name         String
  url          String
  secret       String
  events       String[]
  active       Boolean   @default(true)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  last_used_at DateTime?
  created_by   String
  creator      User      @relation(fields: [created_by], references: [id], onDelete: Cascade)
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  @@index([workspace_id])
  @@map("workspace_webhooks")
  @@schema("workspace_schema")
}

model WorkspaceAiFollowUpRule {
  id                 String            @id @default(uuid())
  workspace_id       String
  delay_milliseconds BigInt
  message_content    String
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt
  followUpCampaignId String?
  sequenceOrder      Int               @default(0)
  followUpCampaign   FollowUpCampaign? @relation("CampaignToRules", fields: [followUpCampaignId], references: [id], onDelete: Cascade)
  workspace          Workspace         @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  @@index([followUpCampaignId, sequenceOrder])
  @@index([workspace_id, created_at])
  @@map("workspace_ai_follow_up_rules")
  @@schema("workspace_schema")
}

model Client {
  id            String         @id @default(uuid())
  workspace_id  String
  external_id   String?
  phone_number  String?
  name          String?
  channel       String?
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  metadata      Json?
  workspace     Workspace      @relation("WorkspaceToClient", fields: [workspace_id], references: [id], onDelete: Cascade)
  conversations Conversation[] @relation("ClientToConversation")
  follow_ups    FollowUp[]     @relation("ClientToFollowUp")
  deals         Deal[]

  @@unique([workspace_id, phone_number, channel])
  @@index([workspace_id])
  @@index([external_id])
  @@index([phone_number])
  @@map("clients")
  @@schema("conversation_schema")
}

model Conversation {
  id                      String             @id @default(uuid())
  workspace_id            String
  client_id               String
  channel                 String?
  channel_conversation_id String?
  status                  ConversationStatus @default(ACTIVE)
  is_ai_active            Boolean            @default(true)
  last_message_at         DateTime?
  created_at              DateTime           @default(now())
  updated_at              DateTime           @updatedAt
  metadata                Json?
  client                  Client             @relation("ClientToConversation", fields: [client_id], references: [id], onDelete: Cascade)
  workspace               Workspace          @relation("WorkspaceToConversation", fields: [workspace_id], references: [id], onDelete: Cascade)
  messages                Message[]          @relation("ConversationToMessage")
  followUp                FollowUp?          @relation("ConversationToFollowUp")

  @@unique([workspace_id, client_id, channel])
  @@unique([workspace_id, channel_conversation_id])
  @@index([workspace_id])
  @@index([client_id])
  @@index([channel_conversation_id])
  @@index([status])
  @@index([last_message_at])
  @@map("conversations")
  @@schema("conversation_schema")
}

model Message {
  id                 String            @id @default(uuid())
  conversation_id    String
  sender_type        MessageSenderType
  content            String?
  timestamp          DateTime          @default(now())
  channel_message_id String?
  metadata           Json?
  errorMessage       String?           @map("error_message")
  media_filename     String?           @default("")
  media_mime_type    String?           @default("")
  media_url          String?           @default("")
  providerMessageId  String?           @map("provider_message_id")
  sentAt             DateTime?         @map("sent_at")
  status             String?           @default("PENDING")
  ai_media_analysis  String?
  privates_notes     Boolean           @default(false)
  operator_name      String?           @default("")
  conversation       Conversation      @relation("ConversationToMessage", fields: [conversation_id], references: [id], onDelete: Cascade)

  @@index([conversation_id])
  @@index([timestamp])
  @@map("messages")
  @@schema("conversation_schema")
}

model Campaign {
  id                   String            @id @default(cuid())
  name                 String
  message              String
  status               String            @default("PENDING")
  createdAt            DateTime          @default(now()) @map("created_at")
  updatedAt            DateTime          @updatedAt @map("updated_at")
  workspaceId          String            @map("workspace_id")
  sendIntervalSeconds  Int               @map("send_interval_seconds")
  allowedSendStartTime String            @map("allowed_send_start_time")
  allowedSendEndTime   String            @map("allowed_send_end_time")
  allowedSendDays      String            @map("allowed_send_days")
  isTemplate           Boolean           @default(false) @map("is_template")
  templateCategory     String?           @map("template_category")
  templateName         String?           @map("template_name")
  templateLanguage     String?           @map("template_language")
  channelIdentifier    String?
  contacts             CampaignContact[]
  workspace            Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("campaigns")
  @@schema("workspace_schema")
}

model CampaignContact {
  id          String    @id @default(cuid())
  campaignId  String    @map("campaign_id")
  contactInfo String    @map("contact_info")
  status      String    @default("PENDING")
  sentAt      DateTime? @map("sent_at")
  error       String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  contactName String?   @map("contact_name")
  variables   Json?     @default("{}")
  campaign    Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId, status])
  @@map("campaign_contacts")
  @@schema("workspace_schema")
}

model WorkspaceTag {
  id           String    @id @default(cuid())
  name         String
  workspace_id String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  @@index([workspace_id])
  @@schema("workspace_schema")
}

model QuickNote {
  id           String     @id @default(uuid())
  content      String
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  workspace_id String?
  workspace    Workspace? @relation(fields: [workspace_id], references: [id])

  @@index([workspace_id])
  @@schema("workspace_schema")
}

model EventFollowUpMapping {
  id                 String           @id @default(uuid())
  workspaceId        String
  eventName          String
  followUpCampaignId String
  isActive           Boolean          @default(true)
  created_at         DateTime         @default(now())
  updated_at         DateTime         @updatedAt
  followUpCampaign   FollowUpCampaign @relation(fields: [followUpCampaignId], references: [id], onDelete: Cascade)
  workspace          Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, eventName])
  @@index([workspaceId, isActive])
  @@map("event_follow_up_mappings")
  @@schema("workspace_schema")
}

model AbandonedCartRule {
  id                 String    @id @default(uuid())
  workspace_id       String
  delay_milliseconds BigInt
  message_content    String
  sequenceOrder      Int       @default(0)
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  workspace          Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  @@index([workspace_id, sequenceOrder])
  @@map("abandoned_cart_rules")
  @@schema("workspace_schema")
}

model AbandonedCart {
  id                  String    @id @default(uuid())
  nuvemshopCheckoutId String    @unique @map("nuvemshop_checkout_id")
  workspaceId         String
  customerEmail       String?
  customerName        String?
  customerPhone       String?
  checkoutUrl         String
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")
  products            Json
  lastReminderSent    DateTime?
  status              String    @default("PENDING")
  workspace           Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
  @@index([status])
  @@map("abandoned_carts")
  @@schema("workspace_schema")
}

model PipelineStage {
  id           String         @id @default(uuid())
  name         String
  color        String         @default("#cccccc")
  order        Int
  workspace_id String
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  deals        Deal[]
  rules        PipelineRule[]
  workspace    Workspace      @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  @@index([workspace_id, order])
  @@map("pipeline_stages")
  @@schema("workspace_schema")
}

model Deal {
  id                String            @id @default(uuid())
  name              String
  value             Float?
  probability       Float?            @default(0)
  expectedCloseDate DateTime?         @map("expected_close_date")
  source            DealSource?
  workspace_id      String
  client_id         String
  stage_id          String
  assigned_to_id    String?
  ai_controlled     Boolean           @default(true) @map("ai_controlled")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  activityLogs      DealActivityLog[]
  documents         DealDocument[]
  notes             DealNote[]
  tasks             DealTask[]
  assignedTo        User?             @relation("UserDeals", fields: [assigned_to_id], references: [id])
  client            Client            @relation(fields: [client_id], references: [id], onDelete: Cascade)
  stage             PipelineStage     @relation(fields: [stage_id], references: [id])
  workspace         Workspace         @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  @@index([workspace_id])
  @@index([client_id])
  @@index([stage_id])
  @@index([assigned_to_id])
  @@map("deals")
  @@schema("workspace_schema")
}

model DealNote {
  id        String   @id @default(uuid())
  content   String
  deal_id   String
  author_id String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  author    User     @relation("UserDealNotes", fields: [author_id], references: [id])
  deal      Deal     @relation(fields: [deal_id], references: [id], onDelete: Cascade)

  @@index([deal_id])
  @@index([author_id])
  @@map("deal_notes")
  @@schema("workspace_schema")
}

model DealTask {
  id           String     @id @default(uuid())
  title        String
  description  String?
  dueDate      DateTime?  @map("due_date")
  status       TaskStatus @default(PENDING)
  deal_id      String
  assignedToId String?    @map("assigned_to_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  assignedTo   User?      @relation("UserDealTasks", fields: [assignedToId], references: [id])
  deal         Deal       @relation(fields: [deal_id], references: [id], onDelete: Cascade)

  @@index([deal_id])
  @@index([assignedToId])
  @@index([status])
  @@map("deal_tasks")
  @@schema("workspace_schema")
}

model DealDocument {
  id           String   @id @default(uuid())
  name         String
  type         String
  size         Int
  url          String
  deal_id      String
  uploadedById String   @map("uploaded_by_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  deal         Deal     @relation(fields: [deal_id], references: [id], onDelete: Cascade)
  uploadedBy   User     @relation("UserDocuments", fields: [uploadedById], references: [id])

  @@index([deal_id])
  @@index([uploadedById])
  @@map("deal_documents")
  @@schema("workspace_schema")
}

model DealActivityLog {
  id        String         @id @default(uuid())
  action    String
  message   String
  deal_id   String
  user_id   String?
  source    ActivitySource @default(AI)
  createdAt DateTime       @default(now()) @map("created_at")
  deal      Deal           @relation(fields: [deal_id], references: [id], onDelete: Cascade)
  user      User?          @relation("UserActivityLogs", fields: [user_id], references: [id])

  @@index([deal_id])
  @@index([user_id])
  @@map("deal_activity_logs")
  @@schema("workspace_schema")
}

model PipelineRule {
  id          String        @id @default(uuid())
  name        String
  description String?
  condition   String
  action      String
  stage_id    String
  is_active   Boolean       @default(true) @map("is_active")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  stage       PipelineStage @relation(fields: [stage_id], references: [id], onDelete: Cascade)

  @@index([stage_id])
  @@map("pipeline_rules")
  @@schema("workspace_schema")
}

model CustomHttpTool {
  id                    String     @id @default(cuid())
  workspaceId           String
  name                  String
  description           String
  method                HttpMethod
  url                   String
  headers               Json?
  queryParametersSchema Json?
  requestBodySchema     Json?
  responseSchema        Json?
  isEnabled             Boolean    @default(true)
  createdAt             DateTime   @default(now()) @map("created_at")
  updatedAt             DateTime   @updatedAt @map("updated_at")
  workspace             Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
  @@index([workspaceId, isEnabled])
  @@map("custom_http_tools")
  @@schema("workspace_schema")
}

model ai_stage_actions {
  id        String            @id
  stageId   String
  type      AIStageActionType
  order     Int
  config    Json
  isEnabled Boolean           @default(true)
  createdAt DateTime          @default(now())
  updatedAt DateTime
  ai_stages ai_stages         @relation(fields: [stageId], references: [id], onDelete: Cascade)

  @@index([stageId, order])
  @@schema("workspace_schema")
}

model ai_stages {
  id                       String             @id
  workspaceId              String
  name                     String
  condition                String
  isActive                 Boolean            @default(true)
  dataToCollect            Json?
  finalResponseInstruction String?
  createdAt                DateTime           @default(now())
  updatedAt                DateTime
  ai_stage_actions         ai_stage_actions[]
  workspaces               Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, name])
  @@index([workspaceId])
  @@schema("workspace_schema")
}

enum ConversationStatus {
  ACTIVE
  PAUSED_BY_USER
  PAUSED_BY_AI
  CLOSED

  @@schema("conversation_schema")
}

enum MessageSenderType {
  CLIENT
  AI
  SYSTEM
  AGENT

  @@schema("conversation_schema")
}

enum FollowUpStatus {
  ACTIVE
  PAUSED
  COMPLETED
  CONVERTED
  CANCELLED
  FAILED

  @@schema("follow_up_schema")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED

  @@schema("workspace_schema")
}

enum DealSource {
  WEBSITE
  LINKEDIN
  GOOGLE_ADS
  FACEBOOK_ADS
  REFERRAL
  EMAIL_MARKETING
  COLD_CALL
  EVENT
  IMPORT
  MANUAL
  OTHER

  @@schema("workspace_schema")
}

enum TaskStatus {
  PENDING
  COMPLETED
  CANCELLED

  @@schema("workspace_schema")
}

enum ActivitySource {
  AI
  USER
  SYSTEM

  @@schema("workspace_schema")
}

enum HttpMethod {
  GET
  POST
  PUT
  PATCH
  DELETE

  @@schema("workspace_schema")
}

enum AIStageActionType {
  API_CALL
  SEND_VIDEO
  CONNECT_CALENDAR
  TRANSFER_HUMAN
  SEND_TEXT_MESSAGE
  SEND_IMAGE
  SEND_DOCUMENT

  @@schema("workspace_schema")
}

enum AbandonedCartStatus {
  PENDING
  SENT_REMINDER_1
  SENT_REMINDER_2
  CONVERTED
  IGNORED
  OPTED_OUT
  FAILED

  @@schema("workspace_schema")
}
