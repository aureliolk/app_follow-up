generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["follow_up_schema", "products_schema", "prompts_schema", "public", "workspace_schema"]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  url         String
  price       Float
  description String?
  brand       String?
  gender      String?
  image       String?
  categories  Json
  variations  Json
  active      Boolean  @default(true)
  created_at  DateTime @default(now())

  @@map("products")
  @@schema("products_schema")
}

model Prompt {
  id            String         @id @default(uuid())
  account_id    String
  created_at    DateTime       @default(now())
  is_current    Boolean?       @default(false)
  instruction   String
  promptContent PromptContent?

  @@map("prompts")
  @@schema("prompts_schema")
}

model PromptContent {
  id              String  @id @default(uuid())
  prompt_id       String  @unique
  prompt_created  String?
  prompt_removed  String?
  prompt_complete String?
  prompt          Prompt  @relation(fields: [prompt_id], references: [id])

  @@map("prompt_contents")
  @@schema("prompts_schema")
}

model FollowUpFunnelStage {
  id          String            @id @default(uuid())
  name        String
  order       Int
  description String?
  created_at  DateTime          @default(now())
  campaigns   FollowUpCampaign[]
  steps       FollowUpStep[]

  @@map("follow_up_funnel_stages")
  @@schema("follow_up_schema")
}

model FollowUpCampaign {
  id          String              @id @default(uuid())
  name        String
  description String?
  created_at  DateTime            @default(now())
  active      Boolean             @default(true)
  steps       Json
  follow_ups  FollowUp[]
  stages      FollowUpFunnelStage[]

  @@map("follow_up_campaigns")
  @@schema("follow_up_schema")
}

model FollowUpStep {
  id                 String              @id @default(uuid())
  funnel_stage_id    String
  name               String
  template_name      String
  wait_time          String              // "10 minutos", "1 hora", etc.
  wait_time_ms       Int                 // Convertido em milissegundos
  message_content    String
  message_category   String?             // "Utility", "Marketing", etc.
  auto_respond       Boolean             @default(true)
  status             String              @default("created")
  created_at         DateTime            @default(now())
  funnel_stage       FollowUpFunnelStage @relation(fields: [funnel_stage_id], references: [id])

  @@map("follow_up_steps")
  @@schema("follow_up_schema")
}

model FollowUp {
  id                String            @id @default(uuid())
  campaign_id       String
  client_id         String
  current_step      Int               @default(0)
  current_stage_id  String?           // Referência ao estágio atual do funil
  status            String
  started_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  next_message_at   DateTime?
  completed_at      DateTime?
  is_responsive     Boolean           @default(false)
  metadata          String?           // Campo para armazenar metadados como JSON
  messages          FollowUpMessage[]
  campaign          FollowUpCampaign  @relation(fields: [campaign_id], references: [id])

  @@index([client_id])
  @@index([status])
  @@map("follow_ups")
  @@schema("follow_up_schema")
}

model FollowUpMessage {
  id              String    @id @default(uuid())
  follow_up_id    String
  step            Int
  funnel_stage    String?   // Nome do estágio do funil
  content         String
  template_name   String?   // Nome do template usado
  category        String?   // Categoria da mensagem
  sent_at         DateTime  @default(now())
  delivered       Boolean   @default(false)
  delivered_at    DateTime?
  follow_up       FollowUp  @relation(fields: [follow_up_id], references: [id])

  @@index([follow_up_id, step])
  @@map("follow_up_messages")
  @@schema("follow_up_schema")
}

// Workspace Models
model User {
  id                 String               @id @default(uuid())
  name               String?
  email              String               @unique
  email_verified     DateTime?
  image              String?
  password           String?
  is_super_admin     Boolean              @default(false)
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  accounts           Account[]
  sessions           Session[]
  owned_workspaces   Workspace[]          @relation("WorkspaceOwner")
  workspace_members  WorkspaceMember[]
  invitations        WorkspaceInvitation[]

  @@map("users")
  @@schema("workspace_schema")
}

model Account {
  id                  String   @id @default(uuid())
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?  @db.Text
  access_token        String?  @db.Text
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?  @db.Text
  session_state       String?
  user                User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@map("accounts")
  @@schema("workspace_schema")
}

model Session {
  id            String   @id @default(uuid())
  session_token String   @unique
  user_id       String
  expires       DateTime
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@schema("workspace_schema")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
  @@schema("workspace_schema")
}

model Workspace {
  id                String               @id @default(uuid())
  name              String
  slug              String               @unique
  owner_id          String
  created_at        DateTime             @default(now())
  updated_at        DateTime             @updatedAt
  owner             User                 @relation("WorkspaceOwner", fields: [owner_id], references: [id])
  members           WorkspaceMember[]
  invitations       WorkspaceInvitation[]
  follow_up_campaigns WorkspaceFollowUpCampaign[]

  @@map("workspaces")
  @@schema("workspace_schema")
}

model WorkspaceMember {
  id           String     @id @default(uuid())
  workspace_id String
  user_id      String
  role         String     // ADMIN, MEMBER, VIEWER
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  workspace    Workspace  @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([workspace_id, user_id])
  @@map("workspace_members")
  @@schema("workspace_schema")
}

model WorkspaceInvitation {
  id           String     @id @default(uuid())
  workspace_id String
  email        String
  role         String     // ADMIN, MEMBER, VIEWER
  token        String     @unique
  expires_at   DateTime
  created_at   DateTime   @default(now())
  invited_by   String
  workspace    Workspace  @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  inviter      User       @relation(fields: [invited_by], references: [id])

  @@unique([workspace_id, email])
  @@map("workspace_invitations")
  @@schema("workspace_schema")
}

// Junction table to connect workspaces with follow-up campaigns
model WorkspaceFollowUpCampaign {
  id           String          @id @default(uuid())
  workspace_id String
  campaign_id  String
  created_at   DateTime        @default(now())
  workspace    Workspace       @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  @@unique([workspace_id, campaign_id])
  @@map("workspace_follow_up_campaigns")
  @@schema("workspace_schema")
}
