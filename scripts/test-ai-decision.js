// scripts/test-ai-decision.js
// Para rodar: node --env-file=.env.local scripts/test-ai-decision.js SEU_FOLLOWUP_ID_AQUI
// Ou se usar TS: npx ts-node --esm --env-file=.env.local scripts/test-ai-decision.ts SEU_FOLLOWUP_ID_AQUI

// Importar Prisma (ajuste o caminho se seu `db.ts` estiver em outro lugar)
import { prisma } from '../lib/db.js'; // Usando .js assumindo compila√ß√£o ou loader
// Importar a fun√ß√£o a ser testada (ajuste o caminho conforme sua estrutura)
import { determineNextAction } from '../app/api/follow-up/_lib/ai/functionIa.js';

// Fun√ß√£o principal ass√≠ncrona
async function runTest() {
  // Pega o ID do follow-up do terceiro argumento da linha de comando
  const followUpId = process.argv[2];

  if (!followUpId) {
    console.error("\n‚ùå Erro: ID do Follow-up n√£o fornecido.");
    console.log("Uso: node scripts/test-ai-decision.js <followUpId>");
    process.exit(1); // Sai com c√≥digo de erro
  }

  console.log(`\nüß† Iniciando teste da fun√ß√£o determineNextAction para FollowUp ID: ${followUpId}`);
  console.log("--------------------------------------------------");

  try {
    // Chama a fun√ß√£o que queremos testar
    const resultAction = await determineNextAction(followUpId);

    console.log("\n‚úÖ Decis√£o da IA Recebida:");
    // Imprime o resultado formatado como JSON
    console.log(JSON.stringify(resultAction, null, 2));

  } catch (error) {
    console.error("\n‚ùå Ocorreu um erro durante o teste:");
    console.error(error);
  } finally {
    // Garante que a conex√£o com o banco seja fechada ao final
    await prisma.$disconnect();
    console.log("\nüîå Conex√£o com o banco de dados fechada.");
  }
}

// Executa a fun√ß√£o principal
runTest();